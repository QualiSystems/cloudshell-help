{"searchDocs":[{"title":"Welcome to CloudShell's Help Center","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA","content":"","keywords":"","version":"2023.1 GA"},{"title":"What is CloudShell?​","type":1,"pageTitle":"Welcome to CloudShell's Help Center","url":"/cloudshell-help/2023.1 GA#what-is-cloudshell","content":" Take a guided tour through CloudShell in this 6 minute video.  Quick video showing how to build hybrid environments containing lab equipment and cloud assets.Check out our Youtube channel for more ","version":"2023.1 GA","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/admin/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/api-guide/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/devguide/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"Abstract Resources Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/features-and-concepts/abstract","content":"","keywords":"","version":"2023.1 GA"},{"title":"What is an abstract resource?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/2023.1 GA/Introduction/features-and-concepts/abstract#what-is-an-abstract-resource","content":" An abstract resource is a component that allows CloudShell to add (to the sandbox) resources based on a set of requirements, such as resource model and/or specific attribute values. When reserving a blueprint that has an abstract resource, CloudShell will find resources that meet the resource requirements and are available for the time slot of the sandbox, and add them to the sandbox. You cannot add abstract resources directly to a sandbox, only to the blueprint. Blueprints can contain a mixture of abstract and specific resources.  An abstract resource is represented on the diagram as a resource with a dotted circle around it. For example:    ","version":"2023.1 GA","tagName":"h2"},{"title":"What does an abstract resource include?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/2023.1 GA/Introduction/features-and-concepts/abstract#what-does-an-abstract-resource-include","content":" An abstract resource must include the family of the resource, and can optionally include the following:  Requirements:  Requirements are the resource settings you need the desired resource to have. CloudShell will only select resources that fully match this criteria. You must select the resource family but you can include any combination of the rest of the requirements in your abstract resource.  Note: As you add or update your requirements, CloudShell updates the number of matching inventory resources in the top right corner of the abstract resource dialog box.  Family (mandatory)Quantity: number of resources to selectSharing policyModel: model or models within the selected familyAttribute valuesSub-resources: sub-resource settings, such as blades, ports, attribute values on each sub-resource  Additional info:  Additional info is information you can add to the abstract resource for automation processes and to make available for the sandbox end-user. For example, you may want to save the resource firmware version, which needs to be upgraded as part of the sandbox provisioning process. Another example could be referencing the image file location of the resource.  Attribute values  Domains:  The domains in which this abstract resource can be used. By default, the current domain is selected and cannot be removed from the abstract resource.  For additional information about Requirements, Additional info and Domains, see Abstract Resource Settings ","version":"2023.1 GA","tagName":"h2"},{"title":"Apps Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/features-and-concepts/apps","content":"Apps Overview","keywords":"","version":"2023.1 GA"},{"title":"CloudShell Features and Benefits","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/features-and-concepts/features-and-benefits","content":"CloudShell Features and Benefits Faster time to market: Easy-to-use drag-and-drop blueprint editor allows you to set up operational blueprints in minutes Python-based environment orchestration and provisioning Vibrant developer community containing growing number of open-source shells for 100s of physical devices, virtual appliances, private and public clouds Shells - Python-based plugins for discovering lab and cloud infrastructure More... Data modelDevice structureCommon, device-specific Day 2 actionsDrag and drop Application layer configuration management: Ability to apply configuration management to VM's OSand applicationsAbility to load configurations on device OS Ease of use: Web-based self-service portal and inventory catalogBlueprint reservation and scheduling, resource allocation management and conflict resolutionAPI and CI/CD tool integrations for DevOps, agile and continuous development processes Monitoring and control: Business insights and utilization reports More... Custom and out-of-the-box dashboards containing easy-to-understand graphs, charts and tables, providing business insights and actionable intelligence around infrastructure consumption and activity, managed identities and more. Resource inventory (resource/chassis/blade/port etc.), cloud infrastructure, sandbox consumption and licenses, user activity and moreEasy-to-use editor allows you to create and customize existing dashboards in minutes Robust inventory search mechanism for finding CloudShell resources based on different criteria In-browser access to resources using SSH, RDP and more Activity feed displaying real-time sandbox progress and activity messages, as well as errors Security and data integrity: HTTPS securityAbility to set cloud security policies across multi-cloud environmentsBlueprint-deployment approach ensuring data integritySiloed environmentsResource authentication credentials encrypted and accessible only to admins and/or delegated usersOption to isolate/share resources across multiple environments/domains High performance: Powerful sandbox-deployment mechanism supports the deployment of 100s of sandbox environments in parallelDistributed execution engines allowing for scale, latency mitigation and quick deliveryIntegration with leading CI/CD tools and technologies Multi-site deployments Domains - Set up site/team/project-specific deployments, with access to privileged users in the organization.Role-based access control, integration with Active Directory, SSO and more Test automation: High-performance test automation platform allows the deployment of 100s of jobs in parallelNative support for Robot FrameworkSupport for rapid execution of hundreds of test batches in parallelRESTful API for automation and integration with CI/CD tools","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/install-configure/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"CloudShell Terminology","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/terminology","content":"CloudShell Terminology this is some example text to make this the same higth","keywords":"","version":"2023.1 GA"},{"title":"CloudShell Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/overview","content":"CloudShell Overview CloudShell is a cloud automation platform that lets you deliver fully functional sandboxes over any combination of infrastructure, from legacy to public cloud, and eliminate resource conflicts. Creating an IT environment blueprint can be as simple as dragging the resources you need from the inventory and creating the connections between them. CloudShell significantly reduces blueprint configuration time (by automating the management of IT resources), offers clear visibility into your organization’s resources and their availability status, and optimizes resource use. With a robust data analysis and visualization engine, CloudShell provides you with business insights into your IT infrastructure, including health, consumption and availability data. CloudShell offers the following features and capabilities: Web-based self-service portal and catalogInventory managementIntegration with ANY infrastructure, private and public clouds, and industry-specific infrastructure both directly and via automation tools or APIsResource allocation management of exclusive/shared resources, conflict resolutionBlueprint modeling, easy-to-use editor with drag-and-drop capabilities allowing you to create operational blueprints in minutesReservation and schedulingNetworking: L1 (physical layer), L2 (VLAN) and L3 (subnet)Infrastructure automation, configuration management and environment orchestrationRole-based access control, Active Directory and SSO integrationGrowing developer community with technical developer forums and 100s of open-source integrations for leading clouds providers, devices, CI/CD tools, etc, providing accessibility, control and common day-2 actionsDistributed execution provisioning allowing for scale, latency mitigation and quick delivery Test automationBI reporting: Sandbox consumption and licenses, resource utilization, inventory, cloud usage, user activity, etcIn-browser access to resources using SSH, RDP and moreLive activity feed displaying real-time deployment activity messages, errors and warnings For details, see CloudShell Features and Benefits.","keywords":"","version":"2023.1 GA"},{"title":"CloudShell - Typical Use Cases","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/Introduction/use-case","content":"","keywords":"","version":"2023.1 GA"},{"title":"Dev/Test (Environment as a Service)​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/2023.1 GA/Introduction/use-case#devtest-environment-as-a-service","content":" In this use case, CloudShell is used as a central location for different teams in the organization to consume sandboxes for their day-to-day development and testing activities, allowing for better exposure and utilization of physical and virtual infrastructure for different types of end users in a repeatable manner.  Applies to: Physical, virtual and hybrid environmentsTarget audience: Engineers, developers, architects, and anyone else who needs to develop or test against the organization's network, APIs, physical/cloud-hosted devices, and operating systems  ","version":"2023.1 GA","tagName":"h2"},{"title":"Demo/POC lab​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/2023.1 GA/Introduction/use-case#demopoc-lab","content":" Let's say you have a sales team that needs on demand environments for POCs or product demos at a prospective customer. The sales engineer could install the system on their laptop and make the necessary tweaks and configurations, but this takes time and will require involving IT staff. With CloudShell, the demo environments are prepared in advance and the sales person simply needs to schedule a reservation of the desired blueprint for the POC meeting and CloudShell will spin up the environment, running any pre-configured automation in the process. This also applies to support/QA engineers who need to reproduce a customer issue.  Applies to: Virtual cloud-based and hybrid environmentsTarget audience: Sales/support engineers  For example, blueprint that deploys a product suite, including front end server, DB and load balancing:   ","version":"2023.1 GA","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/jss/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/portal/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/qna/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/release-notes/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/quick-start/creating-reserving","content":"","keywords":"","version":"2023.1 GA"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/2023.1 GA/quick-start/creating-reserving#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"2023.1 GA","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/2023.1 GA/quick-start/creating-reserving#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  The docs version dropdown appears in your navbar:  ","version":"2023.1 GA","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/2023.1 GA/quick-start/creating-reserving#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"2023.1 GA","tagName":"h2"},{"title":"Welcome to CloudShell's Help Center","type":0,"sectionRef":"#","url":"/cloudshell-help/next","content":"","keywords":"","version":"Next"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/quick-start/translate-your-site","content":"","keywords":"","version":"2023.1 GA"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/2023.1 GA/quick-start/translate-your-site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };   ","version":"2023.1 GA","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/2023.1 GA/quick-start/translate-your-site#translate-a-doc","content":" Copy the docs/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"2023.1 GA","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/2023.1 GA/quick-start/translate-your-site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  caution In development, you can only use one locale at a time.  ","version":"2023.1 GA","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/2023.1 GA/quick-start/translate-your-site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:   The locale dropdown now appears in your navbar: Build your site for a specific locale: ```bash npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"2023.1 GA","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/troubleshooting/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/2023.1 GA/version-history/example","content":"empty page","keywords":"","version":"2023.1 GA"},{"title":"What is CloudShell?​","type":1,"pageTitle":"Welcome to CloudShell's Help Center","url":"/cloudshell-help/next#what-is-cloudshell","content":" Take a guided tour through CloudShell in this 6 minute video.  Quick video showing how to build hybrid environments containing lab equipment and cloud assets.Check out our Youtube channel for more ","version":"Next","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/api-guide/example","content":"empty page","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/admin/example","content":"empty page","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/faq/example","content":"empty page","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/install-configure/example","content":"empty page","keywords":"","version":"Next"},{"title":"CloudShell Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/Abt-CS","content":"CloudShell Overview CloudShell is a cloud automation platform that lets you deliver fully functional sandboxes over any combination of infrastructure, from legacy to public cloud, and eliminate resource conflicts. Creating an IT environment blueprint can be as simple as dragging the resources you need from the inventory and creating the connections between them. CloudShell significantly reduces blueprint configuration time (by automating the management of IT resources), offers clear visibility into your organization’s resources and their availability status, and optimizes resource use. With a robust data analysis and visualization engine, CloudShell provides you with business insights into your IT infrastructure, including health, consumption and availability data. CloudShell offers the following features and capabilities: Web-based self-service portal and catalogInventory managementIntegration with ANY infrastructure, private and public clouds, and industry-specific infrastructure both directly and via automation tools or APIsResource allocation management of exclusive/shared resources, conflict resolutionBlueprint modeling, easy-to-use editor with drag-and-drop capabilities allowing you to create operational blueprints in minutesReservation and schedulingNetworking: L1 (physical layer), L2 (VLAN) and L3 (subnet)Infrastructure automation, configuration management and environment orchestrationRole-based access control, Active Directory and SSO integrationGrowing developer community with technical developer forums and 100s of open-source integrations for leading clouds providers, devices, CI/CD tools, etc, providing accessibility, control and common day-2 actionsDistributed execution provisioning allowing for scale, latency mitigation and quick delivery Test automationBI reporting: Sandbox consumption and licenses, resource utilization, inventory, cloud usage, user activity, etcIn-browser access to resources using SSH, RDP and moreLive activity feed displaying real-time deployment activity messages, errors and warnings For details, see CloudShell Features and Benefits.","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/devguide/example","content":"empty page","keywords":"","version":"Next"},{"title":"CloudShell - Typical Use Cases","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/CS-Use-Cases","content":"","keywords":"","version":"Next"},{"title":"Dev/Test (Environment as a Service)​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/next/intro/CS-Use-Cases#devtest-environment-as-a-service","content":" In this use case, CloudShell is used as a central location for different teams in the organization to consume sandboxes for their day-to-day development and testing activities, allowing for better exposure and utilization of physical and virtual infrastructure for different types of end users in a repeatable manner.  Applies to: Physical, virtual and hybrid environmentsTarget audience: Engineers, developers, architects, and anyone else who needs to develop or test against the organization's network, APIs, physical/cloud-hosted devices, and operating systems  ","version":"Next","tagName":"h2"},{"title":"Demo/POC lab​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/next/intro/CS-Use-Cases#demopoc-lab","content":" Let's say you have a sales team that needs on demand environments for POCs or product demos at a prospective customer. The sales engineer could install the system on their laptop and make the necessary tweaks and configurations, but this takes time and will require involving IT staff. With CloudShell, the demo environments are prepared in advance and the sales person simply needs to schedule a reservation of the desired blueprint for the POC meeting and CloudShell will spin up the environment, running any pre-configured automation in the process. This also applies to support/QA engineers who need to reproduce a customer issue.  Applies to: Virtual cloud-based and hybrid environmentsTarget audience: Sales/support engineers  For example, blueprint that deploys a product suite, including front end server, DB and load balancing:   ","version":"Next","tagName":"h2"},{"title":"Abstract Resources Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/Abstract-Resources","content":"","keywords":"","version":"Next"},{"title":"What is an abstract resource?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/next/intro/features/Abstract-Resources#what-is-an-abstract-resource","content":" An abstract resource is a component that allows CloudShell to add (to the sandbox) resources based on a set of requirements, such as resource model and/or specific attribute values. When reserving a blueprint that has an abstract resource, CloudShell will find resources that meet the resource requirements and are available for the time slot of the sandbox, and add them to the sandbox. You cannot add abstract resources directly to a sandbox, only to the blueprint. Blueprints can contain a mixture of abstract and specific resources.  An abstract resource is represented on the diagram as a resource with a dotted circle around it. For example:    ","version":"Next","tagName":"h2"},{"title":"What does an abstract resource include?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/next/intro/features/Abstract-Resources#what-does-an-abstract-resource-include","content":" An abstract resource must include the family of the resource, and can optionally include the following:  Requirements:  Requirements are the resource settings you need the desired resource to have. CloudShell will only select resources that fully match this criteria. You must select the resource family but you can include any combination of the rest of the requirements in your abstract resource.  Note: As you add or update your requirements, CloudShell updates the number of matching inventory resources in the top right corner of the abstract resource dialog box.  Family (mandatory)Quantity: number of resources to selectSharing policyModel: model or models within the selected familyAttribute valuesSub-resources: sub-resource settings, such as blades, ports, attribute values on each sub-resource  Additional info:  Additional info is information you can add to the abstract resource for automation processes and to make available for the sandbox end-user. For example, you may want to save the resource firmware version, which needs to be upgraded as part of the sandbox provisioning process. Another example could be referencing the image file location of the resource.  Attribute values  Domains:  The domains in which this abstract resource can be used. By default, the current domain is selected and cannot be removed from the abstract resource.  For additional information about Requirements, Additional info and Domains, see Abstract Resource Settings ","version":"Next","tagName":"h2"},{"title":"CloudShell Features and Benefits","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/CS-features-benefits","content":"CloudShell Features and Benefits Faster time to market: Easy-to-use drag-and-drop blueprint editor allows you to set up operational blueprints in minutesPython-based environment orchestration and provisioningVibrant developer community containing growing number of open-source shells for 100s of physical devices, virtual appliances, private and public clouds Shells - Python-based plugins for discovering lab and cloud infrastructure Data modelDevice structureCommon, device-specific Day 2 actionsDrag and drop Application layer configuration management: Ability to apply configuration management to VM's OSand applicationsAbility to load configurations on device OS Ease of use: Web-based self-service portal and inventory catalogBlueprint reservation and scheduling, resource allocation management and conflict resolutionAPI and CI/CD tool integrations for DevOps, agile and continuous development processes Monitoring and control: Business insights and utilization reports Custom and out-of-the-box dashboards containing easy-to-understand graphs, charts and tables, providing business insights and actionable intelligence around infrastructure consumption and activity, managed identities and more. Resource inventory (resource/chassis/blade/port etc.), cloud infrastructure, sandbox consumption and licenses, user activity and moreEasy-to-use editor allows you to create and customize existing dashboards in minutes Robust inventory search mechanism for finding CloudShell resources based on different criteriaIn-browser access to resources using SSH, RDP and moreActivity feed displaying real-time sandbox progress and activity messages, as well as errors Security and data integrity: HTTPS securityAbility to set cloud security policies across multi-cloud environmentsBlueprint-deployment approach ensuring data integritySiloed environmentsResource authentication credentials encrypted and accessible only to admins and/or delegated usersOption to isolate/share resources across multiple environments/domains High performance: Powerful sandbox-deployment mechanism supports the deployment of 100s of sandbox environments in parallelDistributed execution engines allowing for scale, latency mitigation and quick deliveryIntegration with leading CI/CD tools and technologies Multi-site deployments Domains - Set up site/team/project-specific deployments, with access to privileged users in the organization.Role-based access control, integration with Active Directory, SSO and more Test automation: High-performance test automation platform allows the deployment of 100s of jobs in parallelNative support for Robot FrameworkSupport for rapid execution of hundreds of test batches in parallelRESTful API for automation and integration with CI/CD tools","keywords":"","version":"Next"},{"title":"Apps Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/CS-apps","content":"","keywords":"","version":"Next"},{"title":"What is an App?​","type":1,"pageTitle":"Apps Overview","url":"/cloudshell-help/next/intro/features/CS-apps#what-is-an-app","content":" An App is a CloudShell component that provides the definition of an application hosted on a VM. When run in the sandbox, the App deploys a virtual machine (VM) and performs the specified configuration management on it. The CloudShell user can add specific Apps from the App / Service catalog to a blueprint, for example a virtual router or a PostgreSQL database, and connect them to other resources/Apps. Once the App is deployed, an App resource is created, which behaves according to the deployed App Shell specified in the App template. Multiple Apps based on the same App template can run in parallel.  ","version":"Next","tagName":"h2"},{"title":"What does an App include?​","type":1,"pageTitle":"Apps Overview","url":"/cloudshell-help/next/intro/features/CS-apps#what-does-an-app-include","content":" Apps include the following settings:  The cloud provider the App is hosted onThe template/image/VM the App is based on(Optional) The configuration management that will run on the VM (software installations, OS configurations, etc.). In some cases, the VM may already include the required configurations.The Shell of the deployed App, which may offer additional automation capabilities to the user once the App is deployed(Optional) User access credentials to the VM (user/password)  ","version":"Next","tagName":"h2"},{"title":"App configuration process​","type":1,"pageTitle":"Apps Overview","url":"/cloudshell-help/next/intro/features/CS-apps#app-configuration-process","content":" The App configuration process requires creating a cloud provider resource that will host the App’s VM, enabling network connectivity, if required, and creating the App itself in CloudShell Portal.  note Depending on your organization, the system administrator and App/blueprint designers may be the same employee.  For public clouds like AWS EC2 and Microsoft Azure, CloudShell management networks need to first be installed on the cloud provider region that will host the App's VM. See Public Cloud Provider Support in CloudShell. The system administrator creates an Inventory resource for a cloud provider such as VMware vCenter or AWS. For additional information, see Adding Inventory Resources. This &quot;cloud provider resource&quot; will deploy the App's VM. To enable connectivity between Apps and resources or other Apps, the system administrator configures VLAN or Subnet services, as appropriate. See Connectivity Control. The App designer creates App templates, which are based on the cloud provider resource. This requires configuring the VM to deploy and the application to install on the new VM. For additional information, see Adding App templates. The blueprint designer adds the App to a blueprint and configures connectivity to other Apps and resources, as appropriate. For additional information, see Apps in Blueprints and Add Virtual Network Connectivity Requirements. End-users can now deploy the Apps in sandboxes - see Apps in Sandboxes.  ","version":"Next","tagName":"h2"},{"title":"Related Topics​","type":1,"pageTitle":"Apps Overview","url":"/cloudshell-help/next/intro/features/CS-apps#related-topics","content":" Managing Private Cloud Apps in DomainsManaging Public Cloud Apps in DomainsDeveloping Custom Cloud Provider Shells ","version":"Next","tagName":"h2"},{"title":"Configuration Management Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/Configuration-Management","content":"","keywords":"","version":"Next"},{"title":"User flows​","type":1,"pageTitle":"Configuration Management Overview","url":"/cloudshell-help/next/intro/features/Configuration-Management#user-flows","content":" App configuration management:  Admin/domain admin: Creates App template &gt; defines Configuration Management &gt; optionally allows sandbox end-users to rerun Configuration Management on deployed AppsBlueprint designer: Adds App to the blueprintSandbox end-user: Starts sandbox &gt; can rerun Configuration Management for Apps that support the option  Resource configuration management:  Admin/domain admin: Imports shell &gt; creates/discovers resource into inventory &gt; adds Configuration Management asset to CloudShell &gt; associates CM asset with resource model/shellBlueprint designer: Adds resource to blueprint &gt; can edit setup orchestration to call the Configuration Management assetSandbox end user: Can run Configuration Management asset from the resource in the sandbox  ","version":"Next","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"Configuration Management Overview","url":"/cloudshell-help/next/intro/features/Configuration-Management#configuration","content":" Configuration Management scripts and playbooks use the same settings for Apps and for resources.  For Apps: In CloudShell Portal, open the Manage &gt; Apps page. Create or open an existing App template. In the App's Configuration Management screen, define the scripts/playbooks to run. The scripts/playbooks run in their order of appearance during the App's deployment. For resources: In CloudShell Portal, open the Manage &gt; Assets &gt; Resource page. Import the script/playbook as a Repository Asset. Configure its settings. Attach the script/playbook to the appropriate resource models/shells. The script/playbook is displayed as a command in the resource's Resource Commands pane. tip You can use the ExecuteCommand and EnqueueCommand APIs to call resource configuration management as part of setup orchestration (using a customized setup script).  ","version":"Next","tagName":"h2"},{"title":"How Configuration Management works​","type":1,"pageTitle":"Configuration Management Overview","url":"/cloudshell-help/next/intro/features/Configuration-Management#how-configuration-management-works","content":" When configuration management execution called, the following occurs:  For custom scripts: CloudShell sends the script's execution to the Execution Server, using SSH/WinRM to connect to the target device for configuration.For Ansible playbooks: CloudShell sends the execution to the Linux Execution Server using the Execution Server Selector attribute defined in the Ansible shell (Resource Manager Client &gt; Resource Families &gt; Configuration Services &gt; Ansible Configuration).The Execution Server invokes the Ansible that is installed locally on the Linux Execution Server with the inventory of the target resource. The resource username and password should be passed to the inventory file as well for authentication to the target machine.    ","version":"Next","tagName":"h2"},{"title":"Related Topics​","type":1,"pageTitle":"Configuration Management Overview","url":"/cloudshell-help/next/intro/features/Configuration-Management#related-topics","content":" Managing AssetsRun CommandsRun App CommandsImport a Blueprint Package into CloudShellExport Blueprint Packages and ConfigurationsEnable WinRM on Windows VMs to Support Configuration Management ","version":"Next","tagName":"h2"},{"title":"Using Traffic Generator Ports as Abstract Resources","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/traffic-gens/Traffic-Gens-Abst","content":"","keywords":"","version":"Next"},{"title":"Option 1: Configure CloudShell to set the logical names on the ports during reservation setup (using additional info)​","type":1,"pageTitle":"Using Traffic Generator Ports as Abstract Resources","url":"/cloudshell-help/next/intro/features/traffic-gens/Traffic-Gens-Abst#option-1-configure-cloudshell-to-set-the-logical-names-on-the-ports-during-reservation-setup-using-additional-info","content":" This option applies to scenarios where you have different ports that are not specifically configured for the test at hand. In this case, you don’t care which ports you use as long as they’re available, so you set the logical name as additional info on the abstract resource. This provides the greatest control since you don’t specify the logical name of the port as a requirement, which can limit your search for a port. Instead you set the logical name once you get an available port using a custom script.  To configure CloudShell to set the logical names on the ports during reservation setup:  In the appropriate domain, open the Inventory dashboard and in the Abstract Templates page, create an abstract resource template for the traffic generator chassis resource. Create the port abstracts. On each port abstract, open the Additional Info tab and use the Logical Name attribute to set the logical name according to how the port is referred to in the test configuration you load. For example, setting &quot;p2&quot; as the logical name for Port 2: Click Save Changes. Create a blueprint and add the abstract templatefrom the Add Abstract Template catalog. Add to the blueprint a custom setup script that takes the value from the port’s Additional Info and sets the value of the Logical Name attribute on the port. Reserve the blueprint. The Logical Name is set on the port resource. You can now load a test configuration that uses these logical names.  ","version":"Next","tagName":"h2"},{"title":"Option 2: Pre-configure the logical names on the port resources and configure the abstract resources to select the resources that have the desired logical names (using requirements)​","type":1,"pageTitle":"Using Traffic Generator Ports as Abstract Resources","url":"/cloudshell-help/next/intro/features/traffic-gens/Traffic-Gens-Abst#option-2-pre-configure-the-logical-names-on-the-port-resources-and-configure-the-abstract-resources-to-select-the-resources-that-have-the-desired-logical-names-using-requirements","content":" This method limits your search to only those ports that have already been defined with a specific logical name.  Unlike option 1, in this scenario, your ports were pre-configured to perform specific tasks. So here each of the traffic generator’s ports has a logical name configured and you explicitly state the ports you want to use, using requirements, and since the logical name has been configured ahead of time, you don’t need a custom script to do the assigning.  To configure the abstract resources to select the resources that already have the desired logical names:  Set the Logical Name on all the traffic generator chassis resource’s ports. In the Inventory dashboard, click Advanced search. Search for the resource. For each selected port, click the port’s More Info button and select Edit. For example: Make sure the Logical Name attribute is set according to how the port is referred to in the test configuration you load. Click Save. Repeat steps b-e for each additional port. In the Inventory dashboard's Abstract Templates page, create an abstract resource template for the traffic generator chassis resource. In the template's Requirements page, add the required port abstracts. Create a blueprint and add the abstract template from the Add Abstract Template catalog. Reserve the blueprint. ","version":"Next","tagName":"h2"},{"title":"Traffic Generators Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/features/traffic-gens","content":"","keywords":"","version":"Next"},{"title":"Architecture​","type":1,"pageTitle":"Traffic Generators Overview","url":"/cloudshell-help/next/intro/features/traffic-gens#architecture","content":" In CloudShell, a traffic generator is typically modeled using a chassis/blade resource, which represents the traffic generator device and ports, and a controller service that runs the commands on the chassis, such as Load Configuration File, Start Traffic and Get Statistics. Chassis and controllers are each modeled by a dedicated shell. The separation of these two elements into different shells enables you to accurately model your real-life architecture. For example, they support scenarios where the chassis and controller are located on different machines or on the same one, provided as physical devices or software installed on VMs, and configurations that mix and match different controllers and chassis of the same manufacturer.  The following image illustrates a controller service that runs traffic from a traffic generator chassis to a router, via a layer 2 switch:    ","version":"Next","tagName":"h2"},{"title":"Our Traffic Generator Shells​","type":1,"pageTitle":"Traffic Generators Overview","url":"/cloudshell-help/next/intro/features/traffic-gens#our-traffic-generator-shells","content":" While we still support the use of 1st Gen shells, we highly recommend using the 2nd Gen version of the traffic generators you want to use.  Our existing traffic generator shells can be downloaded from Quali Repositories and have different levels - Certified, Preview &amp; Community grade. Can't find the Shell you're looking for? You can extend an existing Shell, create a new Shell based on one of our Shell standards, or suggest a new standard in our Idea Box.  ","version":"Next","tagName":"h2"},{"title":"How to set up a traffic generator in CloudShell​","type":1,"pageTitle":"Traffic Generators Overview","url":"/cloudshell-help/next/intro/features/traffic-gens#how-to-set-up-a-traffic-generator-in-cloudshell","content":" This procedure provides an end-to-end flow from importing a traffic generator chassis and controller into CloudShell, creating the chassis resource and controller service, and adding them to a blueprint.  Import the traffic generator chassis shell into CloudShell. In the appropriate domain, create a chassis resource with the details of your chassis device or VM (if your chassis is provided as a virtual appliance). Import the traffic generator controller shell into CloudShell. Since the controller is a service, if you're not planning on working in the Global domain, you will need to expose the service to the appropriate domain. This is done by associating the service to a service category that is assigned to the domain. If your controller is a 1st Gen shell, in Resource Manager Client, open the Resource Families explorer, click the service family and associate the service category. For 2nd Gen service shells, assign the shell's service category to the appropriate domain in the Manage dashboard. Create a blueprint in the domain. Add the controller service, chassis ports that will be used in the traffic test, and any additional resources/Apps as appropriate. Create the connectivity requirements between the different endpoints. Associate the chassis ports to the port configurations specified in the controller's configuration file, as explained in the following section, under Load Configuration.  ","version":"Next","tagName":"h2"},{"title":"How to use traffic generators in CloudShell​","type":1,"pageTitle":"Traffic Generators Overview","url":"/cloudshell-help/next/intro/features/traffic-gens#how-to-use-traffic-generators-in-cloudshell","content":" The following workflow highlights a typical traffic test. For additional commands and use cases, see the readme file that comes with your traffic generator shell.  In the sandbox, open the controller's commands pane. Run these commands in the following order: Run Load Configuration to load the configuration file prepared by your admin to the controller. The configuration file includes the settings according to which the traffic test will be run. For example, packet size, number of packets to send in parallel, interval at which to send packet batches, etc. Points to consider: The file must be accessible to the execution server that will run the traffic test.The configuration file provides a unique name for each port on the chassis. Therefore, in order to assign a port on the configuration file to a port on the chassis, you must specify the file's defined port name on the port in CloudShell. To do so, drag the port resource into the diagram from the Add Resource catalog, open its Resource Structure pane, click the port's drop-down list and select Attributes, and in the Logical Name field, specify the port's name. note Since traffic operations may take longer than the default 10 minute idle timeout period set for shell drivers, once you run the first command on the traffic generator controller, the controller will remain in a &quot;running&quot; state (indicated by the turning wheel on the controller service) until the reservation ends or the shell driver process is manually terminated. Run Start Traffic to generate and send the traffic to the DUT according to the settings provided in the configuration file. Set the Blocking input to decide how to run the traffic test (True to run synchronously or False to run asynchronously). In synchronous mode, CloudShell waits for the traffic test to complete before allowing additional traffic commands to run, and in asynchronous mode, you can run additional commands while the traffic test is running. Run Stop Traffic to stop sending traffic from the traffic generator. This does not terminate the controller's shell driver process, so if the Start Traffic command is running in synchronous mode, all subsequent commands will still have to wait for the traffic test to complete. Run Get Statistics. This command returns the traffic test's statistics in JSON or CSV format. Set the command's inputs: View Name: Type of statistics to return. For example, Port Statistics, Traffic Item Statistics, Flow Statistics, etc. The types available may differ depending on the traffic generator.Output Type (Enum): JSON or CSV. JSON prints the statistics to the reservation's output, which is useful for API calls that can then use the output, while CSV attaches a CSV file with the test's statistics to the sandbox. ","version":"Next","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/jss/example","content":"empty page","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/portal/example","content":"empty page","keywords":"","version":"Next"},{"title":"CloudShell Terminology","type":0,"sectionRef":"#","url":"/cloudshell-help/next/intro/Term","content":"CloudShell Terminology this is some example text to make this the same higth","keywords":"","version":"Next"},{"title":"Quickstart Guide - Creating and Reserving Blueprints","type":0,"sectionRef":"#","url":"/cloudshell-help/next/quick-start/creating-reserving","content":"","keywords":"","version":"Next"},{"title":"Basic flow​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#basic-flow","content":" Using CloudShell, setting up the test environment is simple:  Create a blueprint.Add resources and model L1 connections.Define the blueprint's properties.  ","version":"Next","tagName":"h2"},{"title":"Create a blueprint​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#create-a-blueprint","content":" A blueprint is an offline container of the environment you would like to spin up. It contains the environment’s components and network connections, as well as any required automation scripts. The use of blueprints allows you to repeatedly launch the same pristine environment.  To create a blueprint:  In the Blueprint Catalog, click the Create Blueprint link in the top left corner. In the blueprint’s workspace, specify a name for the blueprint and click the check mark when you’re done. If you want other members of your domain to also see and use this blueprint, click the Lock button in the blue banner to unlock privacy. Next, let’s add resources and their network connections.  ","version":"Next","tagName":"h2"},{"title":"Add resources to the blueprint​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#add-resources-to-the-blueprint","content":" Resources are our way of calling your devices in CloudShell. Each resource models a specific device in your lab, like a router, switch, DUT or bridge, and allows you to control that device or perform operations on it, from within CloudShell.  Don’t worry, the CloudShell admin already set those up for you. All you need to do is drag the ones you need into your blueprint and set up their network connections.  To add resources to the blueprint.  In the blueprint workspace, click Resources. From the Add Resource catalog, drag the resources you need into the canvas. Our catalog has two resources, DUT and Traffic Generator, but you can use the free text search field or Advanced search to fine tune your search if you have a lot of resources. Each new blueprint includes CloudShell's out-of-the-box orchestration scripts that set up and tear down the environment. The Setup script provisions the resources to the sandbox, resolves reservation conflicts, deploys App VMs and establishes connections between the sandbox's endpoints. The Teardown script is activated when the sandbox starts its teardown process and is responsible for releasing the resources, removing connections and deletes App VMs and related infrastructure from their cloud provider.  ","version":"Next","tagName":"h2"},{"title":"Set up connectivity​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#set-up-connectivity","content":" CloudShell also allows you to model the actual network connections between the blueprint’s devices. When you reserve the blueprint, CloudShell will create the connections for you.  To set up connectivity between 2 resources:  Hover over a resource and select the Create Connection option. Then, click the other resource. In the Resource Connections dialog box, from the Connection Type dropdown list, select Route (Logical) to create a L1 connection or Connector for a L2 connection. Select a port on the source resource and one on the target and click Add. Repeat this step to add additional connection routes. Click Save. Physical routes are represented by black dotted lines between the resources, as illustrated in the image below. Notes: If a connection route is purple, that’s because you defined a Connector type of a connection. This is used for L2 connections and will fail unless you have an L2 resource orvCenter dvSwitch connecting the endpoints. Edit the route connection to open the Resource Connections dialog box, click the Inventory tab in the dialog box, delete the connections and create new ones.If you defined an L1 connection in the blueprint but the connection line is orange, that’s because there’s no L1 switch resource connecting the endpoints. Notify the administrator. At this point, they’re just connection requirements. When the sandbox starts, CloudShell will activate the connections, replacing the dotted lines with solid ones. The blueprint is now ready for use. Next, let’s learn how to reserve a blueprint so we can run our test.  ","version":"Next","tagName":"h2"},{"title":"Define the blueprint's properties​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#define-the-blueprints-properties","content":" ","version":"Next","tagName":"h2"},{"title":"Orchestration scripts​","type":1,"pageTitle":"Quickstart Guide - Creating and Reserving Blueprints","url":"/cloudshell-help/next/quick-start/creating-reserving#orchestration-scripts","content":" CloudShell provides out-of-the-box setup and teardown orchestration scripts which are attached to every new blueprint, but you’re welcome to create your own custom scripts, as explained in Creating and using orchestration scripts in CloudShell.  The out-of-the-box scripts do the following:  CloudShell Sandbox Setup: Make sure sandbox resource are available (conflict resolution), reserve resources, deploy Apps on their defined cloud providers and establish connectionsCloudShell Sandbox Teardown: Release resources, tear down Apps (delete deployed VMs and related infrastructure from the cloud provider) and remove connections.Save/Restore: Used to save the memory, state and configurations of sandboxes and later on restore them back ","version":"Next","tagName":"h3"},{"title":"Quickstart Guide - Creating Sandboxes","type":0,"sectionRef":"#","url":"/cloudshell-help/next/quick-start/create-sandbox","content":"","keywords":"","version":"Next"},{"title":"Basic flow​","type":1,"pageTitle":"Quickstart Guide - Creating Sandboxes","url":"/cloudshell-help/next/quick-start/create-sandbox#basic-flow","content":" Using CloudShell, setting up the test environment is simple:  Browse the Blueprint Catalog.Reserve a blueprint.  ","version":"Next","tagName":"h2"},{"title":"Browse the Blueprint Catalog​","type":1,"pageTitle":"Quickstart Guide - Creating Sandboxes","url":"/cloudshell-help/next/quick-start/create-sandbox#browse-the-blueprint-catalog","content":" The Blueprint Catalog displays all your blueprints as well as any public blueprints in the current domain. This is where users browse for their desired blueprint and reserve it.  To open the Blueprint Catalog:  Log into CloudShell Portal and switch to the desired domain. For example: Click the Blueprints menu to display the self-service Blueprint Catalog. Tip: To see only your blueprints, select the Owned by me filter on the left. Browse the Blueprint Catalog. Feel free to click a blueprint’s tile to look inside. Look at the blueprint’s instructions. They should provide additional details about the blueprint and how to use it.  ","version":"Next","tagName":"h2"},{"title":"Reserve a blueprint​","type":1,"pageTitle":"Quickstart Guide - Creating Sandboxes","url":"/cloudshell-help/next/quick-start/create-sandbox#reserve-a-blueprint","content":" By reserving a blueprint, you create a live instance (or sandbox) of the blueprint’s environment. The reservation process allocates the ports that are involved in the resource connections and if they are defined as unshared, no one else can use them while the sandbox is active.  To reserve a blueprint:  In the Blueprint Catalog or workspace, click Reserve. In the Reserve dialog box, you can optionally modify the reservation details. For example, change the duration of the sandbox or schedule it to run in the future, or click the Advanced Form () to add permitted users so others can see and use the sandbox even if it’s private, and more. Click Reserve to start the sandbox. The setup process should take a few minutes. During this time, CloudShell will provision the required resources, allocate the ports and create the connections between the resources. The sandbox’s state changes to Active, notifying you that it’s ready for use. You can now use the sandbox. For example, connect to a device or application that was deployed in the sandbox, run commands by hovering over a resource and clicking the Commands button, check the Output console for sandbox messages and indications, and more.  ","version":"Next","tagName":"h2"},{"title":"Troubleshooting​","type":1,"pageTitle":"Quickstart Guide - Creating Sandboxes","url":"/cloudshell-help/next/quick-start/create-sandbox#troubleshooting","content":" Resources catalog  If you can’t find the resources you are looking for in the Add Resource catalog, use the advanced search or expand the resource folders in the catalog. If you still can’t find the resources, check the Inventory dashboard as the resources may be excluded. If that’s the case, contact the administrator.  Reserve form  When reserving the blueprint, the conflict resolution dialog box may be displayed if any of your resources or ports are currently being used in other sandboxes AND are defined as unshared. If this happens, the dialog box will propose alternative timeslots in which the blueprint’s resources are all available. If you’re the blueprint designer, you could replace one of the conflicting resources with an available one.  Setup process  If the setup process encounters any errors, click the Activity button to review the reservation’s log for errors and consult the administrator. ","version":"Next","tagName":"h2"},{"title":"Behavior Changes and Removed Capabilities","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/behavior-change","content":"","keywords":"","version":"Next"},{"title":"Behavior Changes​","type":1,"pageTitle":"Behavior Changes and Removed Capabilities","url":"/cloudshell-help/next/release-notes/behavior-change#behavior-changes","content":" The following list includes changes in behavior introduced into CloudShell by version:  Capability\tChange Description\tChanged in ReleaseErlang version\tTo accomodate the upgraded RabbitMQ version (3.12.0) explained in Breaking Changes, Erlang will be upgraded to newer version 25.2.3. This version is the maximum supported Erlang for RabbitMq 3.12.0. Environment variables will be updated accordingly to suite the new Erlang version.\t2023.2 EA Python versions\tIn 2022.1, we updated CloudShell's Python versions as follows: 2.7.10 to 2.7.183.7.1 to 3.9.9 This may cause unexpected behavior if your automation is constrained to use specific Python versions.\t2022.1 EA API tokens\tTo increase security and to allow time-based token access to the system, CloudShell 2022.1 generates a time-based token for our product APIs. In previous versions, only some of the APIs used such a system. By default, the token validity period is 5 hours. Notes: For security reasons, we recommend upgrading to the latest version of CloudShell. Existing automation code utilizing Quali API may need to be updated to regenerate a token whenever an existing token expires. 2022.1 EA Reserve form\tThe Blueprint Name field in the Reserve form is no longer editable.\t2022.1 EA New Job Scheduling\tIn this CloudShell version, the Test Execution Servers use Robot Framework 4.0. As such, tests using an older version of the framework might not work as expected. For details, see this section in the Robot Framework 4.0 release notes.\t2022.1 EA Updated BI dashboards\tThe following out-of-the-box dashboards will be replaced by the new 2021.2 GA version (customized out-of-the-box dashboards will be left as is): Blueprints, Inventory, Sandboxes, Users, and Utilization. Viewer access is provided out-of-the-box, allowing CloudShell users to view and use the dashboards. Initial configuration, as well as the ability to add/customize dashboards and use legacy versions requires privileged access. For details, contact your Quali Account Manager.\t2021.2 GA New Job Scheduling\tFor security reasons, the Mongo deployment is no longer accessible outside the Kubernetes cluster and as a result does not get an external IP. However, external access can easily be configured using the externalAccess tag n the mongodb section of the customer-values-yaml. For details, see Upgrade Considerations for New Job Scheduling.\t2021.2 EA New Job Scheduling\tBefore upgrading from an earlier version, make sure to run the following on the Kubernetes client machine: kubectl delete secret cloudshell-acr -n cloudshell 2021.2 EA New Job Scheduling\tJob Scheduling Service needs to be restarted after 2021.2 EA upgrade. This only applies to 2021.2 EA version and will be fixed for the GA.\t2021.2 EA Blocking the option to link license pool to global domain\tWhen a user tries to attach a license pool to the Global domain they will now get a message stating that pools can't be associated with the global domain. This does not apply to existing associations of license pools with Global domain.\t2021.2 EA Periods no longer supported in abstract resource names\tAbstract resource names no longer support '.' (period) characters. Furthermore, importing blueprints will replace periods with underscores '_' in abstract resource names.\t2020.2 New CloudShell installation prerequisites\tAs of version 2020.2 we are moving some of our Sandbox related data to be managed and stored in Mongo DB instead of SQL Server. This allows CloudShell to drastically improve its performance, allowing hundreds of Sandbox reservation per minute. 2 new prerequisites are installed on Quali Sever: MongoDB RabbitMQ Quali Server's Installation Wizard and QsConfig have gone through some changes. New screens and some updated to existing screens have been added to the flow.\t2020.2 GA DB optimizations clean-ups\tData expiration is defined by default to be saved indefinitely. Admins can now define the time to keep sandbox event log data via the SandboxLogAndOutputSaveDuration configuration key.\t2020.2 GA &quot;In Use&quot; Sandbox overtime\tWhen using Job Scheduling, sandboxes will now end once all tests in the job are completed or the sandbox reaches its defined duration (the earlier of the two). This applies also to sandboxes that include L1 switches or use an ActivateTopology APImethod.\t9.3 GA Patch 5  ","version":"Next","tagName":"h2"},{"title":"Breaking Changes​","type":1,"pageTitle":"Behavior Changes and Removed Capabilities","url":"/cloudshell-help/next/release-notes/behavior-change#breaking-changes","content":" The following list includes capabilities that have been removed from CloudShell and the version number in which the change was introduced.  Capability\tChange Description\tChanged in ReleaseRabbitMQ upgrade and new location\tThe embedded RabbitMQ will be upgraded to version 3.12.0 and relocated from …\\Cloudshell\\Server\\SandboxService\\RabbitMq\\rabbitmq_server\\ to …\\Cloudsell\\Server\\Rabbit. Any custom settings like password must be manually relocated to the new destination files. Previous versions of RabbitMQ can be uninistalled.\t2023.2 EA Partial search in sandboxes dashboard\tThe Sandboxes dashboard does not support searching by partial sandbox id.\t2021.2 EA Blueprint Build Type - Deprecation\tIt is no longer possible to reserve blueprints of type Build.\t2020.2 GA Licensing\tAs of version 9.3, customers that have a Team Tier license will not be able to: 1. Have more than 50 concurrent licenses 2. Use white labeling 3. SSO to the system 9.3 GA Licensing\tCustomers that will not have a job scheduling add-on license will not see the job scheduling tab in the portal, and will not be able to start jobs using API calls.\t9.3 GA ","version":"Next","tagName":"h2"},{"title":"Bugs Fixed","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/bug-fixes","content":"Bugs Fixed The table below lists all the bugs reported by customers, that were resolved in version 2023.2. All releases may include additional resolved issues, which are not included in this list. Support Case #\tInternal WI #\tDescription\tFixed in Version55499\t12371\tSandbox Setup failed and returned the following error: &quot;General Execution. Failed to start execution: Server is unavailable&quot;\t2023.2 55312\t12262\tResources in blueprint are not displayed if there are too many sub-resources\t2023.2 54496\t12239\tSuite fails with &quot;does not have sufficient permissions to be the sandbox owner&quot;.\t2023.2 54315\t12027\tCloudShell installation granted elevated privileges to Authenticated Users. The elevated privileges are rolled back automatically by the installation process when they're no longer needed.\t2023.2 52848\t10909\tNaming convention for New Job Scheduling suite executions is different from the old Job Scheduling\t2023.2 52321\t9975\tCannot delete deployed app after cloud provider resource has been deleted\t2023.2 53004\t10403\tHandled an infrequent error in Testshell, which would cause tools to fail unexpectedly, and in particular would cause session-based tools to exit unexpectedly.\t2023.1 50993\t9357\tCopying sandbox data to clipboard would fail if certain characters were present in the data. For example '/n'.\t2023.1 53222\t10700\tCould not delete blueprint with resources containing attribute changes\t2023.1 52650\t10238\tCable Physical connection did not displayed properly\t2023.1 52767\t10442\tGetReservationDetails would not show attributes for Apps, if they were attributes for a logical resource and were still with the default value.\t2023.1 53180\t10617\tProvide API capability to modify permitted editors on blueprints (In rare cases, calling GetTopologyDetails would fail with an unreadable error message)\t2023.1 53470\t10829\t(Old and New Job Scheduling) Blueprint reservations were delayed by 5 minutes and as a result could not schedule test runs (CloudShell erroneously identified some of the blueprint's resources as being reserved, causing the tests to fail on reservation conflicts)\t2023.1 52803\t10126\t(New Job Scheduling) Job execution got Automatically Canceled because test was not found\t2023.1","keywords":"","version":"Next"},{"title":"Quickstart Guide - CloudShell Installation and Initial Setup","type":0,"sectionRef":"#","url":"/cloudshell-help/next/quick-start/install-and-setup","content":"","keywords":"","version":"Next"},{"title":"Basic flow​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#basic-flow","content":" Using CloudShell, setting up the test environment is simple:  Install CloudShell.Set up users, groups and domains.Create resources, services and Apps.Check your work.  ","version":"Next","tagName":"h2"},{"title":"Install CloudShell​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#install-cloudshell","content":" CloudShell suite contains several basic components and optional add-ons that provide additional capabilities.  The basic components are:  CloudShell Portal: CloudShell's web portal that allows end users to reserve blueprints on demand from a self-service catalog, and enables admins and designers to administer CloudShell and create blueprints.Quali Server: Processes requests, manages and shares data/resources with CloudShell clients (Portal, APIs, etc.) from the CloudShell databases (MySQL, MongoDB).Execution Server: CloudShell component that executes commands and tests. Multiple execution servers can be installed for distributed provisioning.  Make sure the machine(s) that will host CloudShell comply with our CloudShell System Requirements. info CloudShell’s servers and clients can coexist on the same machine, but for load/performance reasons, you might want to consider installing high-load components such as Quali Server, CloudShell Portal and the Execution Servers on dedicated machines. Install and configure CloudShell suite. For details, see CloudShell Suite Installation Overview. You can also install CloudShell in a High Availability configuration. We highly recommend using CloudShell’s Insight, our BI platform. Insight is provided free of charge with out-of-the-box resource utilization and activity dashboards, but can be customized as a paid add-on. For details, see CloudShell Insight BI. You might also want to install and configure QualiX Overview, to allow your sandbox end-users to remotely connect to the sandbox’s devices and VMs from the browser, without needing the machine’s credentials nor an RDP or SSH client.  ","version":"Next","tagName":"h2"},{"title":"Optionally set up users, groups and domains​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#optionally-set-up-users-groups-and-domains","content":" Depending on your organization, you might want to set up domains for your different teams or sites. A domain is basically a space that includes the resources, Apps and blueprints that apply to a specific team, project or geographically-distributed site in your organization, and the users that belong to that team or site.  Groups are the link that connects users to a domain. Each group has a role, which is delegated to that group’s members in the domain. As such, you could have a single user with different roles in different domains. That user could be a “regular user” in one domain but a “domain admin” in another.  This diagram illustrates how users, groups and domains work together:    ","version":"Next","tagName":"h2"},{"title":"Related Topics​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#related-topics","content":" Adding DomainsManaging CloudShell GroupsManaging CloudShell Users  ","version":"Next","tagName":"h3"},{"title":"Create Resources and Apps​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#create-resources-and-apps","content":" Now's a good time to start populating your inventory with resources, Apps and services, which the blueprint designers can later add to their blueprints. For details on how to create these components, see the related topics section that follows.  Each one of these components is based on a shell, which is a plugin that defines how the component will behave in the sandbox. A shell models a specific component, so if we want to create a Juniper switch, we’ll need a Juniper switch shell and to deploy or load a Google Cloud VM, we’ll need a shell that can do that. To quickly see how CloudShell works, we recommend using our PUT and Traffic Generator mock shells.  CloudShell supports 4 types of components:  Resource models an actual physical or virtual device. It could be a layer 2 Cisco switch or some existing virtual appliance on the cloud that you’d like to load into CloudShell. Feel free to use our PUT Shell Mock and Traffic Shell Mock resources.App is the definition of virtual application to be deployed as part of the sandbox. It defines the VM to be deployed and configuration management script or playbook that will install the application(s) on top of the VM. Apps live in the context of a sandbox and when the sandbox ends, CloudShell’s teardown script will also delete the VM from the cloud.Service is a sandbox component that injects some code into the sandbox. It could be used to register to a cloud-based service like a traffic generator on Azure.Abstract resource is a component that includes the settings you need from a specific resource. When the blueprint is reserved, CloudShell finds a matching resource in the CloudShell inventory and puts it in the blueprint instead of the abstract. Abstract resources provide the blueprint with additional flexibility and can also be used in combination with other resources.  note Quali has a vibrant developer’s community that is continuously developing new shells. Please browse it to see if we already have the shell you need. If we don’t, feel free to create or extend an existing shell, or propose a shell in our Idea box.  ","version":"Next","tagName":"h2"},{"title":"Related Topics​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#related-topics-1","content":" Shells OverviewResources OverviewApps OverviewServices OverviewAbstract Resources OverviewMigrating 1st Gen Shells to 2nd Gen  ","version":"Next","tagName":"h3"},{"title":"Check components​","type":1,"pageTitle":"Quickstart Guide - CloudShell Installation and Initial Setup","url":"/cloudshell-help/next/quick-start/install-and-setup#check-components","content":" Now that you've set up your domains, inventory and Apps, it's time to make sure everything's in working order:  Make sure the users you created can connect to their domains and have the appropriate permissions. For example, domain admins should have access to the Manage dashboard and be able to create/edit resources in the Inventory dashboard. Make sure the domains include the right components: Log into a domain as a regular user. Create a blueprint. Open the Resource and Service/App catalogs and make sure the appropriate resources are available. If any resources are missing, make sure you created them in the right domain. Apps are exposed to domains via a service category that is attached to the Apps. Make sure the service category is associated to the right domain(s). Add some resources/Apps to the blueprint and reserve. Make sure the sandbox 's setup process completes successfully. When the sandbox is active, its resources should appear reserved in the Inventory dashboard and the Apps should be deployed. ","version":"Next","tagName":"h2"},{"title":"General Announcements","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/general-announcments","content":"","keywords":"","version":"Next"},{"title":"vSphere 6.5 and 6.7 End of Support​","type":1,"pageTitle":"General Announcements","url":"/cloudshell-help/next/release-notes/general-announcments#vsphere-65-and-67-end-of-support","content":" vSphere 6.7. x (ESXi 6.7) are entering End of General Support on 15th October 2022. As such, starting with CloudShell 2023.2, the OVAs of our execution servers and CloudShell SDK will be vSphere 7-compatible only. ","version":"Next","tagName":"h2"},{"title":"Supported CloudShell Versions","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/supported-versions","content":"Supported CloudShell Versions CloudShell offers two support phases: Premier Support Phase: This phase begins from the release of a version and lasts for 18 months from the release date. During this phase, customers are entitled to full support services for this version including any hotfixes or patches.Extended Support Phase: This phase applies to all releases that are 18 - 30 months from their original release date. During this phase, customers are entitled to all support services apart from bug fixes on those releases. Bugs that are found in versions that are in the Extended Support phase may be fixed in later versions and customers will be asked to upgrade to a version that is then in its Premier support phase. Note: Quali continues to support releases under the extended support plan. However, bugs found on these versions may only be fixed in later releases. Quali does not provide any technical assistance or fixes for releases that reached end of support. This is the time to make sure that you have upgraded to the latest available CloudShell release. Release\tGA Version release date\tEnd of Premier support (18 months)\tEnd of Extended support (30 months)2023.2\tJuly 2023\tFeb 1, 2025\tFeb 1, 2026 2023.1\tMarch 2023\tOct 1, 2024\tOct 1, 2025 2022.2\tSeptember 2022\tApr 1, 2024\tApr 1, 2025 2022.1\tFebruary 2022\tSept 1, 2023\tSept 1, 2024 2021.2\tAugust 2021\tJan 1, 2023\tJan 1, 2024 2021.1\tApril 2021\tNov 1, 2022\tNov 1, 2023 2020.2\tOctober 2020\tMay 1, 2022\tMay 1, 2023 2020.1\tJune 2020\tJan 1, 2022\tJan 1, 2023 9.3\tSeptember 2019\tApr 1, 2021\tApr 1, 2022 9.2\tMay 2019\tDec 1, 2020\tDec 1, 2021 9.1\tJanuary 2019\tAug 1 2020\tAug 1, 2021 9.0\tSeptember 2018\tApril 1, 2020\tApr 1, 2021 8.3\tApril 2018\tNov 1, 2019\tNov 1, 2020 8.2\tDecember 2017\tJuly 1, 2019\tJuly 1, 2020 8.1\tAugust 2017\tMarch 1, 2019\tMarch 1, 2020","keywords":"","version":"Next"},{"title":"Known Limitations","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/known-limitations","content":"Known Limitations This section describes known limitations of CloudShell , as well as possible workarounds for these issues when available.","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/troubleshooting/example","content":"empty page","keywords":"","version":"Next"},{"title":"What's New in Version 2023.2","type":0,"sectionRef":"#","url":"/cloudshell-help/next/release-notes/whats-new","content":"","keywords":"","version":"Next"},{"title":"Version 1.1 updates​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#version-11-updates","content":" ","version":"Next","tagName":"h2"},{"title":"QualiX 5.0​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#qualix-50","content":" We're happy to announce the release of QualiX 5.0. Based on Apache Guacamole 1.5.3, this new version of QualiX includes a streamlined QualiX-over-Docker deployment process that allows you to automate SSL and advanced post-deployment configurations as part of the installation process, and updated RDP/SSH/VNC/Telnet dependencies. Upgrade procedures for existing QualiX over Docker/OVAinstallatoins are available.  For details, see Deploy QualiX 5.0 and up Using Docker.  ","version":"Next","tagName":"h3"},{"title":"Features and enhancements​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#features-and-enhancements","content":" This release includes the following features and enhancements.  ","version":"Next","tagName":"h2"},{"title":"HTTPSsupport for Training Portal​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#httpssupport-for-training-portal","content":" For enhanced security, the CloudShell Training Portal can be configured to run over HTTPS. For details, see Setting up Training Portal Using the Installer (Over the Shoulder).  ","version":"Next","tagName":"h3"},{"title":"Allow shell update to override old/deprecated attributes​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#allow-shell-update-to-override-olddeprecated-attributes","content":" It is now possible to configure shells to automatically remove old deprecated attributes whenever the CloudShell admin updates the shell in the Manage &gt; Shells page. For details, see Overriding Old/Deprecated Shell Attributes.  ","version":"Next","tagName":"h3"},{"title":"Support for MongoDB 6.0.4​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#support-for-mongodb-604","content":" CloudShell's setup process provides a MongoDB 6.0.4 installer for new customers, while existing customers will need to upgrade their MongoDB installation manually, as explained in How to Upgrade MongoDB From 4.2 to 6.0.  ","version":"Next","tagName":"h3"},{"title":"Security enhancements and 3rd-party tool upgrades​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#security-enhancements-and-3rd-party-tool-upgrades","content":" Implemented support for MongoDB 6.0.4. New CloudShell installations come with version 6.0.4 installed by default, while existing CloudShell customers can upgrade to version 6.0.4 when upgrading to CloudShell 2023.2. We’ve updated the version of RabbitMQ (3.11.10) &amp; Erlang (25.2.3) ElasticSearch has been upgraded to 7.17.5  ","version":"Next","tagName":"h2"},{"title":"New and updated API methods​","type":1,"pageTitle":"What's New in Version 2023.2","url":"/cloudshell-help/next/release-notes/whats-new#new-and-updated-api-methods","content":" New CloudShell Administration REST API for managing CloudShell domains, groups, users, license pools, and more. For details, see CloudShell Administration REST API. New APIs supporting organizing resources in blueprints and sandboxes: GetResourcesLabelsInTopology GetResourcesLabelsInReservation Added new methods to WebAPI endpoint and client for Cloudshell Automation API including: EndReservation CreateImmediateTopologyReservation CreateTopologyReservation GetUserDetails GetTopologyDetails FindResources GetResourceAvailabilityInTimeRange ConfigureAppsV2 GetReservationStatus GetCurrentReservations GetDomainDetails UpdateReservationDescription AddResourcesToReservation UpdateReservationGlobalInputs GetScheduledReservations GetResourceLiveStatus ExportFamiliesAndModels DeleteReservation GetServerDateAndTime UpdateResourceDescription UpdateResourceAddress ","version":"Next","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/admin/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/api-guide/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/next/version-history/example","content":"empty page","keywords":"","version":"Next"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/devguide/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/install-configure/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"Apps Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/features-and-concepts/apps","content":"Apps Overview","keywords":"","version":"2023.2 GA"},{"title":"CloudShell Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/overview","content":"CloudShell Overview CloudShell is a cloud automation platform that lets you deliver fully functional sandboxes over any combination of infrastructure, from legacy to public cloud, and eliminate resource conflicts. Creating an IT environment blueprint can be as simple as dragging the resources you need from the inventory and creating the connections between them. CloudShell significantly reduces blueprint configuration time (by automating the management of IT resources), offers clear visibility into your organization’s resources and their availability status, and optimizes resource use. With a robust data analysis and visualization engine, CloudShell provides you with business insights into your IT infrastructure, including health, consumption and availability data. CloudShell offers the following features and capabilities: Web-based self-service portal and catalogInventory managementIntegration with ANY infrastructure, private and public clouds, and industry-specific infrastructure both directly and via automation tools or APIsResource allocation management of exclusive/shared resources, conflict resolutionBlueprint modeling, easy-to-use editor with drag-and-drop capabilities allowing you to create operational blueprints in minutesReservation and schedulingNetworking: L1 (physical layer), L2 (VLAN) and L3 (subnet)Infrastructure automation, configuration management and environment orchestrationRole-based access control, Active Directory and SSO integrationGrowing developer community with technical developer forums and 100s of open-source integrations for leading clouds providers, devices, CI/CD tools, etc, providing accessibility, control and common day-2 actionsDistributed execution provisioning allowing for scale, latency mitigation and quick delivery Test automationBI reporting: Sandbox consumption and licenses, resource utilization, inventory, cloud usage, user activity, etcIn-browser access to resources using SSH, RDP and moreLive activity feed displaying real-time deployment activity messages, errors and warnings For details, see CloudShell Features and Benefits.","keywords":"","version":"2023.2 GA"},{"title":"Abstract Resources Overview","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/features-and-concepts/abstract","content":"","keywords":"","version":"2023.2 GA"},{"title":"What is an abstract resource?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/Introduction/features-and-concepts/abstract#what-is-an-abstract-resource","content":" An abstract resource is a component that allows CloudShell to add (to the sandbox) resources based on a set of requirements, such as resource model and/or specific attribute values. When reserving a blueprint that has an abstract resource, CloudShell will find resources that meet the resource requirements and are available for the time slot of the sandbox, and add them to the sandbox. You cannot add abstract resources directly to a sandbox, only to the blueprint. Blueprints can contain a mixture of abstract and specific resources.  An abstract resource is represented on the diagram as a resource with a dotted circle around it. For example:    ","version":"2023.2 GA","tagName":"h2"},{"title":"What does an abstract resource include?​","type":1,"pageTitle":"Abstract Resources Overview","url":"/cloudshell-help/Introduction/features-and-concepts/abstract#what-does-an-abstract-resource-include","content":" An abstract resource must include the family of the resource, and can optionally include the following:  Requirements:  Requirements are the resource settings you need the desired resource to have. CloudShell will only select resources that fully match this criteria. You must select the resource family but you can include any combination of the rest of the requirements in your abstract resource.  Note: As you add or update your requirements, CloudShell updates the number of matching inventory resources in the top right corner of the abstract resource dialog box.  Family (mandatory)Quantity: number of resources to selectSharing policyModel: model or models within the selected familyAttribute valuesSub-resources: sub-resource settings, such as blades, ports, attribute values on each sub-resource  Additional info:  Additional info is information you can add to the abstract resource for automation processes and to make available for the sandbox end-user. For example, you may want to save the resource firmware version, which needs to be upgraded as part of the sandbox provisioning process. Another example could be referencing the image file location of the resource.  Attribute values  Domains:  The domains in which this abstract resource can be used. By default, the current domain is selected and cannot be removed from the abstract resource.  For additional information about Requirements, Additional info and Domains, see Abstract Resource Settings ","version":"2023.2 GA","tagName":"h2"},{"title":"CloudShell Features and Benefits","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/features-and-concepts/features-and-benefits","content":"CloudShell Features and Benefits Faster time to market: Easy-to-use drag-and-drop blueprint editor allows you to set up operational blueprints in minutes Python-based environment orchestration and provisioning Vibrant developer community containing growing number of open-source shells for 100s of physical devices, virtual appliances, private and public clouds Shells - Python-based plugins for discovering lab and cloud infrastructure More... Data modelDevice structureCommon, device-specific Day 2 actionsDrag and drop Application layer configuration management: Ability to apply configuration management to VM's OSand applicationsAbility to load configurations on device OS Ease of use: Web-based self-service portal and inventory catalogBlueprint reservation and scheduling, resource allocation management and conflict resolutionAPI and CI/CD tool integrations for DevOps, agile and continuous development processes Monitoring and control: Business insights and utilization reports More... Custom and out-of-the-box dashboards containing easy-to-understand graphs, charts and tables, providing business insights and actionable intelligence around infrastructure consumption and activity, managed identities and more. Resource inventory (resource/chassis/blade/port etc.), cloud infrastructure, sandbox consumption and licenses, user activity and moreEasy-to-use editor allows you to create and customize existing dashboards in minutes Robust inventory search mechanism for finding CloudShell resources based on different criteria In-browser access to resources using SSH, RDP and more Activity feed displaying real-time sandbox progress and activity messages, as well as errors Security and data integrity: HTTPS securityAbility to set cloud security policies across multi-cloud environmentsBlueprint-deployment approach ensuring data integritySiloed environmentsResource authentication credentials encrypted and accessible only to admins and/or delegated usersOption to isolate/share resources across multiple environments/domains High performance: Powerful sandbox-deployment mechanism supports the deployment of 100s of sandbox environments in parallelDistributed execution engines allowing for scale, latency mitigation and quick deliveryIntegration with leading CI/CD tools and technologies Multi-site deployments Domains - Set up site/team/project-specific deployments, with access to privileged users in the organization.Role-based access control, integration with Active Directory, SSO and more Test automation: High-performance test automation platform allows the deployment of 100s of jobs in parallelNative support for Robot FrameworkSupport for rapid execution of hundreds of test batches in parallelRESTful API for automation and integration with CI/CD tools","keywords":"","version":"2023.2 GA"},{"title":"CloudShell Terminology","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/terminology","content":"CloudShell Terminology this is some example text to make this the same higth","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/jss/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"CloudShell - Typical Use Cases","type":0,"sectionRef":"#","url":"/cloudshell-help/Introduction/use-case","content":"","keywords":"","version":"2023.2 GA"},{"title":"Dev/Test (Environment as a Service)​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/Introduction/use-case#devtest-environment-as-a-service","content":" In this use case, CloudShell is used as a central location for different teams in the organization to consume sandboxes for their day-to-day development and testing activities, allowing for better exposure and utilization of physical and virtual infrastructure for different types of end users in a repeatable manner.  Applies to: Physical, virtual and hybrid environmentsTarget audience: Engineers, developers, architects, and anyone else who needs to develop or test against the organization's network, APIs, physical/cloud-hosted devices, and operating systems  ","version":"2023.2 GA","tagName":"h2"},{"title":"Demo/POC lab​","type":1,"pageTitle":"CloudShell - Typical Use Cases","url":"/cloudshell-help/Introduction/use-case#demopoc-lab","content":" Let's say you have a sales team that needs on demand environments for POCs or product demos at a prospective customer. The sales engineer could install the system on their laptop and make the necessary tweaks and configurations, but this takes time and will require involving IT staff. With CloudShell, the demo environments are prepared in advance and the sales person simply needs to schedule a reservation of the desired blueprint for the POC meeting and CloudShell will spin up the environment, running any pre-configured automation in the process. This also applies to support/QA engineers who need to reproduce a customer issue.  Applies to: Virtual cloud-based and hybrid environmentsTarget audience: Sales/support engineers  For example, blueprint that deploys a product suite, including front end server, DB and load balancing:   ","version":"2023.2 GA","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/qna/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/portal/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"Translate your site","type":0,"sectionRef":"#","url":"/cloudshell-help/quick-start/translate-your-site","content":"","keywords":"","version":"2023.2 GA"},{"title":"Configure i18n​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/quick-start/translate-your-site#configure-i18n","content":" Modify docusaurus.config.js to add support for the fr locale:  docusaurus.config.js export default { i18n: { defaultLocale: 'en', locales: ['en', 'fr'], }, };   ","version":"2023.2 GA","tagName":"h2"},{"title":"Translate a doc​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/quick-start/translate-your-site#translate-a-doc","content":" Copy the docs/intro.md file to the i18n/fr folder:  mkdir -p i18n/fr/docusaurus-plugin-content-docs/current/ cp docs/intro.md i18n/fr/docusaurus-plugin-content-docs/current/intro.md   Translate i18n/fr/docusaurus-plugin-content-docs/current/intro.md in French.  ","version":"2023.2 GA","tagName":"h2"},{"title":"Start your localized site​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/quick-start/translate-your-site#start-your-localized-site","content":" Start your site on the French locale:  npm run start -- --locale fr   Your localized site is accessible at http://localhost:3000/fr/ and the Getting Started page is translated.  caution In development, you can only use one locale at a time.  ","version":"2023.2 GA","tagName":"h2"},{"title":"Add a Locale Dropdown​","type":1,"pageTitle":"Translate your site","url":"/cloudshell-help/quick-start/translate-your-site#add-a-locale-dropdown","content":" To navigate seamlessly across languages, add a locale dropdown.  Modify the docusaurus.config.js file:   The locale dropdown now appears in your navbar: Build your site for a specific locale: ```bash npm run build -- --locale fr   Or build your site to include all the locales at once:  npm run build  ","version":"2023.2 GA","tagName":"h2"},{"title":"Manage Docs Versions","type":0,"sectionRef":"#","url":"/cloudshell-help/quick-start/creating-reserving","content":"","keywords":"","version":"2023.2 GA"},{"title":"Create a docs version​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/quick-start/creating-reserving#create-a-docs-version","content":" Release a version 1.0 of your project:  npm run docusaurus docs:version 1.0   The docs folder is copied into versioned_docs/version-1.0 and versions.json is created.  Your docs now have 2 versions:  1.0 at http://localhost:3000/docs/ for the version 1.0 docscurrent at http://localhost:3000/docs/next/ for the upcoming, unreleased docs  ","version":"2023.2 GA","tagName":"h2"},{"title":"Add a Version Dropdown​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/quick-start/creating-reserving#add-a-version-dropdown","content":" To navigate seamlessly across versions, add a version dropdown.  Modify the docusaurus.config.js file:  The docs version dropdown appears in your navbar:  ","version":"2023.2 GA","tagName":"h2"},{"title":"Update an existing version​","type":1,"pageTitle":"Manage Docs Versions","url":"/cloudshell-help/quick-start/creating-reserving#update-an-existing-version","content":" It is possible to edit versioned docs in their respective folder:  versioned_docs/version-1.0/hello.md updates http://localhost:3000/docs/hellodocs/hello.md updates http://localhost:3000/docs/next/hello ","version":"2023.2 GA","tagName":"h2"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/release-notes/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/troubleshooting/example","content":"empty page","keywords":"","version":"2023.2 GA"},{"title":"empty page","type":0,"sectionRef":"#","url":"/cloudshell-help/version-history/example","content":"empty page","keywords":"","version":"2023.2 GA"}],"options":{"highlightResult":true,"id":"default"}}