"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[22680],{54096:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>a});var n=l(17624),o=l(4552);const s={sidebar_position:1},r="CloudShell Deployment Overview",i={id:"admin/setting-up-cloudshell/cloudshell-deployment-overview",title:"CloudShell Deployment Overview",description:"To manage a lab, you need to add all your equipment into CloudShell via Resource Manager.",source:"@site/versioned_docs/version-2023.3/admin/setting-up-cloudshell/cloudshell-deployment-overview.md",sourceDirName:"admin/setting-up-cloudshell",slug:"/admin/setting-up-cloudshell/cloudshell-deployment-overview",permalink:"/admin/setting-up-cloudshell/cloudshell-deployment-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/versioned_docs/version-2023.3/admin/setting-up-cloudshell/cloudshell-deployment-overview.md",tags:[],version:"2023.3",lastUpdatedAt:1715878866e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setting Up CloudShell",permalink:"/category/setting-up-cloudshell"},next:{title:"Defining the Target Server",permalink:"/admin/setting-up-cloudshell/defining-the-target-server"}},d={},a=[];function u(e){const t={a:"a",h1:"h1",p:"p",strong:"strong",...(0,o.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"cloudshell-deployment-overview",children:"CloudShell Deployment Overview"}),"\n",(0,n.jsxs)(t.p,{children:["To manage a lab, you need to add all your equipment into CloudShell via ",(0,n.jsx)(t.strong,{children:"Resource Manager"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"In CloudShell, the devices are considered resources."}),"\n",(0,n.jsxs)(t.p,{children:["After adding your equipment into CloudShell, you will need to create your resources. Resources are based on what we call shells. A shell is a CloudShell entity that defines the resource's metadata, attributes, and automation, and resource structure. CloudShell supports two types of shells, 1st Gen and 2nd Gen resources. Learn more at ",(0,n.jsx)(t.a,{href:"/intro/features/shells",children:"Shells Overview"}),"."]}),"\n",(0,n.jsx)(t.p,{children:"CloudShell can only manage devices it knows about, so you will first need to import the shells into CloudShell and then create your resources."}),"\n",(0,n.jsx)(t.p,{children:"The admin user is responsible for populating CloudShell and ensuring that all devices are loaded to the lab."}),"\n",(0,n.jsx)(t.p,{children:"The admin user is responsible for setting up the resource repository."}),"\n",(0,n.jsx)(t.p,{children:"Set up the user groups and resource domains, and then add or import users to the system."})]})}function c(e={}){const{wrapper:t}={...(0,o.M)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},4552:(e,t,l)=>{l.d(t,{I:()=>i,M:()=>r});var n=l(11504);const o={},s=n.createContext(o);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);