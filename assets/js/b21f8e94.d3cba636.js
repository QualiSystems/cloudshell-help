"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[92772],{7436:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=s(17624),t=s(4552);const i={},d="CloudShell Server Events Queue",o={id:"admin/cloudshell-event-queue/index",title:"CloudShell Server Events Queue",description:"Cloudshell Server emits events when some operations occur in the backend.",source:"@site/versioned_docs/version-2023.3/admin/cloudshell-event-queue/index.md",sourceDirName:"admin/cloudshell-event-queue",slug:"/admin/cloudshell-event-queue/",permalink:"/admin/cloudshell-event-queue/",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/versioned_docs/version-2023.3/admin/cloudshell-event-queue/index.md",tags:[],version:"2023.3",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CloudShell Server Events Queue",permalink:"/category/cloudshell-server-events-queue"},next:{title:"CloudShell Administration",permalink:"/admin/"}},l={},a=[{value:"Configuring Cloudshell Server Events Queue",id:"configuring-cloudshell-server-events-queue",level:2},{value:"Whitelisting events",id:"whitelisting-events",level:3},{value:"Example Configuration",id:"example-configuration",level:2},{value:"Supported Events",id:"supported-events",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,t.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"cloudshell-server-events-queue",children:"CloudShell Server Events Queue"}),"\n",(0,r.jsx)(n.p,{children:"Cloudshell Server emits events when some operations occur in the backend.\nSystem designers can subscribe to these events for audit or automation purposes."}),"\n",(0,r.jsx)(n.p,{children:"This article describes how to configure this integration, as well as what events are available."}),"\n",(0,r.jsx)(n.h1,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsx)(n.p,{children:"Cloudshell Server can publish to RabbitMQ.\nThe RabbitMQ Server needs to share a reliable network with Cloudshell Server.\nRabbitMQ TCP listener port must be accessible by Cloudshell Server."}),"\n",(0,r.jsx)(n.p,{children:"Cloudshell Server Events Queue has been tested with RabbitMQ version 3.11 but should work with RabbitMQ 3.X"}),"\n",(0,r.jsxs)(n.p,{children:["To experiment with this, it is possible to emit messages to the RabbitMQ service used by an embedded Sandbox Service (which is installed with Cloudshell Server).\n",(0,r.jsx)(n.a,{href:"#example-configuration",children:"See example"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"configuring-cloudshell-server-events-queue",children:"Configuring Cloudshell Server Events Queue"}),"\n",(0,r.jsx)(n.p,{children:"In RabbitMQ, make sure you have an exchange, and a queue.\nBind the queue to the exchange, with a routing key."}),"\n",(0,r.jsx)(n.p,{children:"In Cloudshell Server customer.config, set the following keys:"}),"\n",(0,r.jsx)(n.admonition,{title:"customer.config",type:"note",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<add key="EnableServerEventsMQ" value="True"/>\n<add key="ServerEventsMQHost" value="rabbitMq_hostname_or_ip"/>\n<add key="ServerEventsMQPort" value="rabbitmq_tcp_listener_port"/>\n<add key="ServerEventsMQUser" value="user"/>\n<add key="ServerEventsMQPassword" value="password"/>\n<add key="ServerEventsMQRabbitExchange" value="exchange"/>\n<add key="ServerEventsMQRabbitRoutingKey" value="key"/>\n'})})}),"\n",(0,r.jsx)(n.h3,{id:"whitelisting-events",children:"Whitelisting events"}),"\n",(0,r.jsx)(n.p,{children:"It is possible to determine which events will be published by Cloudshell Server.\nTo do so, create a file titled ServerEventsWhiteList.csv in the application directory (next to QsTeamServer.exe)."}),"\n",(0,r.jsxs)(n.p,{children:["Typically this is %ProgramFiles(x86)%\\Qualisystems\\Server\nThe contents of the CSV should be the events you ",(0,r.jsx)(n.em,{children:"allow"})," to be published"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"#supported-events",children:"See"})," which ",(0,r.jsx)(n.a,{href:"#supported-events",children:"events"})," are supported (all are sent by default)"]}),"\n",(0,r.jsx)(n.admonition,{title:"Example csv",type:"note",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-csv",children:"UserCreatedEvent, UserGroupsListUpdatedEvent, LoginEvent\n"})})}),"\n",(0,r.jsx)(n.p,{children:"In the above example, Cloudshell Server would only emit events related to new users created, or modification to user groups (adding or removing users) or to logins"}),"\n",(0,r.jsx)(n.h2,{id:"example-configuration",children:"Example Configuration"}),"\n",(0,r.jsx)(n.admonition,{title:"Example for embedded sandbox service",type:"note",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<add key="EnableServerEventsMQ" value="True"/>\n<add key="ServerEventsMQHost" value="localhost"/>\n<add key="ServerEventsMQPort" value="5671"/>\n<add key="ServerEventsMQUser" value="rabbitmq_user"/>\n<add key="ServerEventsMQPassword" value="rabbitmq_password"/>\n<add key="ServerEventsMQRabbitExchange" value="exchange"/>\n<add key="ServerEventsMQRabbitRoutingKey" value="key"/>\n'})})}),"\n",(0,r.jsx)(n.h2,{id:"supported-events",children:"Supported Events"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserCreatedEvent"}),"\n:   This event is triggered when a new user is created."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserDeletedEvent"}),"\n:   This event occurs when a user is deleted."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserGroupsListUpdatedEvent"}),"\n:   This event is fired when the list of user groups is updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserUpdatedEvent"}),"\n:   This event happens when a user's details are updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"LoginEvent"}),"\n:   This event is triggered when a user logs in."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserGroupAddedEvent"}),"\n:   This event occurs when a new user group is added."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserGroupDeletedEvent"}),"\n:   This event is fired when a user group is deleted."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserGroupDomainsUpdatedEvent"}),"\n:   This event is triggered when the domains of a user group are updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"UserGroupUpdatedEvent"}),"\n:   This event happens when a user group is updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"JobEndedEvent"}),"\n:   This event occurs when a job ends."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"JobSetEndedEvent"}),"\n:   This event is fired when a job suite ends."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceAvailabilityChangedDomainEvent"}),"\n:   This event is triggered when the availability of a resource changes."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TopologyCreatedEvent"}),"\n:   This event occurs when a new blueprint is created."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TopologyUpdatedEvent"}),"\n:   This event is fired when a blueprint is updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TopologyDeletedEvent"}),"\n:   This event is triggered when a blueprint is deleted."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TopologyRenamedEvent"}),"\n:   This event happens when a blueprint is renamed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DeployResourceEvent"}),"\n:   This event occurs when a resource is deployed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceEnabledEvent"}),"\n:   This event is fired when a resource is enabled."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceDisabledEvent"}),"\n:   This event is triggered when a resource is disabled."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceAddedEvent"}),"\n:   This event occurs when a resource is added."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceDeletedEvent"}),"\n:   This event is fired when a resource is deleted."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceMovedEvent"}),"\n:   This event happens when a resource is moved."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceRenamedEvent"}),"\n:   This event occurs when a resource is renamed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceUpdatedEvent"}),"\n:   This event is fired when a resource is updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourcesReservedEvent"}),"\n:   This event is triggered when resources are reserved."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ResourceUnlockedEvent"}),"\n:   This event occurs when a resource is unlocked."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"BulkResourcesAddedEvent"}),"\n:   This event is fired when multiple resources are added in bulk."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationCreatedEvent"}),"\n:   This event is triggered when a sandbox is created."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationDeleteEvent"}),"\n:   This event occurs when a sandbox is deleted."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationEndEvent"}),"\n:   This event is fired when a sandbox ends."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationEndTimeChangedEvent"}),"\n:   This event is triggered when the end time of a sandbox is changed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationRejectedEvent"}),"\n:   This event happens when a sandbox is rejected (typically due to user or license restrictions)."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationRenamedEvent"}),"\n:   This event occurs when a sandbox is renamed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationSetupEndedEvent"}),"\n:   This event is fired when the setup of a sandbox ends."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationStartTimeChangedEvent"}),"\n:   This event is triggered when the start time of a sandbox is changed."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ReservationUpdateEvent"}),"\n:   This event happens when a sandbox is updated."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WorkOrderResourceUpdatedEvent"}),"\n:   This event is fired when a work order resource is updated in an assembly lab sandbox."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WorkOrderResourceSolvedEvent"}),"\n:   This event occurs when a concrete resource is selected for a work order resource in an assembly lab sandbox."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WorkOrderResourceCreatedEvent"}),"\n:   This event is triggered when a work order resource is created in an assembly lab sandbox."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WorkOrderResourceUnsolvedEvent"}),"\n:   This event is fired when a concrete match for a work order resource is unselected in an assembly lab sandbox."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"WorkOrderResourceRemovedEvent"}),"\n:   This event happens when a work order resource is removed in an assembly lab sandbox."]})]})}function c(e={}){const{wrapper:n}={...(0,t.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},4552:(e,n,s)=>{s.d(n,{I:()=>o,M:()=>d});var r=s(11504);const t={},i=r.createContext(t);function d(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);