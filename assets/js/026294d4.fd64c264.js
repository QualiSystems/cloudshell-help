"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[22680],{54096:(e,l,t)=>{t.r(l),t.d(l,{assets:()=>d,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var o=t(17624),n=t(4552);const s={sidebar_position:1},r="CloudShell Deployment Overview",i={id:"admin/setting-up-cloudshell/cloudshell-deployment-overview",title:"CloudShell Deployment Overview",description:"To manage a lab, you need to add all your equipment into CloudShell via Resource Manager.",source:"@site/versioned_docs/version-2023.3/admin/setting-up-cloudshell/cloudshell-deployment-overview.md",sourceDirName:"admin/setting-up-cloudshell",slug:"/admin/setting-up-cloudshell/cloudshell-deployment-overview",permalink:"/cloudshell-help/admin/setting-up-cloudshell/cloudshell-deployment-overview",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/versioned_docs/version-2023.3/admin/setting-up-cloudshell/cloudshell-deployment-overview.md",tags:[],version:"2023.3",lastUpdatedAt:1715896034e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Setting Up CloudShell",permalink:"/cloudshell-help/category/setting-up-cloudshell"},next:{title:"Defining the Target Server",permalink:"/cloudshell-help/admin/setting-up-cloudshell/defining-the-target-server"}},d={},u=[];function a(e){const l={a:"a",h1:"h1",p:"p",strong:"strong",...(0,n.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(l.h1,{id:"cloudshell-deployment-overview",children:"CloudShell Deployment Overview"}),"\n",(0,o.jsxs)(l.p,{children:["To manage a lab, you need to add all your equipment into CloudShell via ",(0,o.jsx)(l.strong,{children:"Resource Manager"}),"."]}),"\n",(0,o.jsx)(l.p,{children:"In CloudShell, the devices are considered resources."}),"\n",(0,o.jsxs)(l.p,{children:["After adding your equipment into CloudShell, you will need to create your resources. Resources are based on what we call shells. A shell is a CloudShell entity that defines the resource's metadata, attributes, and automation, and resource structure. CloudShell supports two types of shells, 1st Gen and 2nd Gen resources. Learn more at ",(0,o.jsx)(l.a,{href:"/cloudshell-help/intro/features/shells",children:"Shells Overview"}),"."]}),"\n",(0,o.jsx)(l.p,{children:"CloudShell can only manage devices it knows about, so you will first need to import the shells into CloudShell and then create your resources."}),"\n",(0,o.jsx)(l.p,{children:"The admin user is responsible for populating CloudShell and ensuring that all devices are loaded to the lab."}),"\n",(0,o.jsx)(l.p,{children:"The admin user is responsible for setting up the resource repository."}),"\n",(0,o.jsx)(l.p,{children:"Set up the user groups and resource domains, and then add or import users to the system."})]})}function c(e={}){const{wrapper:l}={...(0,n.M)(),...e.components};return l?(0,o.jsx)(l,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},4552:(e,l,t)=>{t.d(l,{I:()=>i,M:()=>r});var o=t(11504);const n={},s=o.createContext(n);function r(e){const l=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function i(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),o.createElement(s.Provider,{value:l},e.children)}}}]);