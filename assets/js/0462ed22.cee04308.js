"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[55604],{75020:(e,l,n)=>{n.r(l),n.d(l,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>d,metadata:()=>i,toc:()=>h});var t=n(17624),s=n(4552);const d={sidebar_position:5},o="Managing the Shell\u2019s Data Model",i={id:"devguide/developing-shells/managing-the-shell-data-mode",title:"Managing the Shell\u2019s Data Model",description:"Shells often have a complex data model, which consists of multiple levels of hierarchy and many attributes. CloudShell provides a way to generate Python classes that represent the data model. These classes enable some Python IDEs (like PyCharm) to provide auto complete support to facilitate the development of the Shell\u2019s driver.",source:"@site/docs/devguide/developing-shells/managing-the-shell-data-mode.md",sourceDirName:"devguide/developing-shells",slug:"/devguide/developing-shells/managing-the-shell-data-mode",permalink:"/cloudshell-help/next/devguide/developing-shells/managing-the-shell-data-mode",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/docs/devguide/developing-shells/managing-the-shell-data-mode.md",tags:[],version:"current",lastUpdatedAt:1715795988e3,sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Modeling Shells with TOSCA",permalink:"/cloudshell-help/next/devguide/developing-shells/modeling-shells-with-tosca"},next:{title:"How Shells Get Information from CloudShell",permalink:"/cloudshell-help/next/devguide/developing-shells/how-shells-get-info-from-cs"}},a={},h=[{value:"Generating the Shell\u2019s data model",id:"generating-the-shells-data-model",level:2},{value:"Using the Shell data model",id:"using-the-shell-data-model",level:2},{value:"Updating the Shell\u2019s data model",id:"updating-the-shells-data-model",level:2}];function r(e){const l={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(l.h1,{id:"managing-the-shells-data-model",children:"Managing the Shell\u2019s Data Model"}),"\n",(0,t.jsx)(l.p,{children:"Shells often have a complex data model, which consists of multiple levels of hierarchy and many attributes. CloudShell provides a way to generate Python classes that represent the data model. These classes enable some Python IDEs (like PyCharm) to provide auto complete support to facilitate the development of the Shell\u2019s driver."}),"\n",(0,t.jsx)(l.h2,{id:"generating-the-shells-data-model",children:"Generating the Shell\u2019s data model"}),"\n",(0,t.jsxs)(l.p,{children:["As you know from previous chapters, the Shell\u2019s data model consists of the standard specifications and the extended data model, which is defined in the\xa0",(0,t.jsx)(l.code,{children:"shell-definition.yaml"}),"\xa0file. In this topic, we will explain the process of generating the\xa0",(0,t.jsx)(l.code,{children:"data_model.py"}),"\xa0file and how to use it in your driver."]}),"\n",(0,t.jsxs)(l.p,{children:["Let\u2019s start by creating a new Switch type resource based on the\xa0",(0,t.jsx)(l.a,{href:"https://github.com/QualiSystems/cloudshell-standards/blob/master/Documentation/networking_standard.md",children:"Networking Shell Standard"}),"."]}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.strong,{children:"To generate the Shell data model:"})}),"\n",(0,t.jsxs)(l.ol,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Run the following command in your Command Line to create a new Shell project."}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"shellfoundry new generating-data-model --template=gen2/networking/switch\ncd data-model-example\n"})}),"\n",(0,t.jsxs)(l.p,{children:["The Shell project includes the\xa0",(0,t.jsx)(l.em,{children:"shell-definition.yaml"}),"\xa0file, which contains the information needed for importing the Shell\u2019s data model according to the relevant TOSCA Shell standard."]}),"\n",(0,t.jsxs)(l.p,{children:["For a detailed explanation on how to customize the Shell using TOSCA, see\xa0",(0,t.jsx)(l.a,{href:"/cloudshell-help/next/devguide/developing-shells/modeling-shells-with-tosca",children:"Modeling Shells with TOSCA"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsxs)(l.p,{children:["Add the following example properties\xa0",(0,t.jsx)(l.em,{children:"custom_property_1"}),"\xa0and\xa0",(0,t.jsx)(l.em,{children:"custom_property_2"}),"\xa0to the\xa0",(0,t.jsx)(l.code,{children:"shell-definition.yaml"}),"\xa0file:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-css",children:"imports:\n  - cloudshell_standard: cloudshell_networking_standard_4_0_1.yaml\n\nnode_types:\n\n  vendor.ShellModeling:\n    derived_from: cloudshell.nodes.Switch\n    properties:\n      custom_property_1:\n        type: string\n      custom_property_2:\n        type: string\n"})}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsxs)(l.p,{children:["Save the file and make sure that the YAML format is valid. You can use online tools such as\xa0",(0,t.jsx)(l.a,{href:"http://www.yamllint.com/",children:"yamllint"}),"\xa0to validate the format."]}),"\n"]}),"\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsxs)(l.p,{children:["Run the following command in your Command Line to create the ",(0,t.jsx)(l.code,{children:"data_model.py"})," file:"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"shellfoundry generate\n"})}),"\n",(0,t.jsxs)(l.p,{children:["ShellFoundry sends the\xa0",(0,t.jsx)(l.code,{children:"shell-definition.yaml"}),"\xa0file to CloudShell and creates a new code file with the Shell\u2019s data model -\xa0",(0,t.jsx)(l.code,{children:"data_model.py"}),", which is then copied into the project\u2019s\xa0",(0,t.jsx)(l.em,{children:"src"}),"\xa0folder."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"using-the-shell-data-model",children:"Using the Shell data model"}),"\n",(0,t.jsx)(l.p,{children:"To use the Shell\u2019s data model in the driver, we need to first import the data model into the driver."}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.strong,{children:"To use data model in the driver:"})}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsxs)(l.p,{children:["Add the following to\xa0",(0,t.jsx)(l.code,{children:"driver.py"}),":"]}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"from data_model import *\n"})}),"\n",(0,t.jsxs)(l.p,{children:["After importing the\xa0",(0,t.jsx)(l.em,{children:"data_model"}),", PyCharm (and some other IDEs) will recognize the docstring code-hint annotations and will enable autocomplete as you can see below:"]}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.img,{alt:"Directory Structure",src:n(69644).c+"",width:"611",height:"218"})}),"\n",(0,t.jsxs)(l.p,{children:["The\xa0",(0,t.jsx)(l.code,{children:"data_model.py"}),"\xa0is mainly used to work with resource attributes and implement the Auto-discovery process."]}),"\n",(0,t.jsx)(l.p,{children:"For more information see the following related topics:"}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/cloudshell-help/next/devguide/developing-shells/how-shells-get-info-from-cs",children:"How Shells Get Information from CloudShell"})}),"\n",(0,t.jsx)(l.li,{children:(0,t.jsx)(l.a,{href:"/cloudshell-help/next/devguide/developing-shells/auto-discovery-for-inventory-shells",children:"Auto-discovery for Inventory Shells"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(l.h2,{id:"updating-the-shells-data-model",children:"Updating the Shell\u2019s data model"}),"\n",(0,t.jsxs)(l.p,{children:["After you change the Shell\u2019s data model, by changing the custom attributes in the\xa0",(0,t.jsx)(l.code,{children:"shell-definition.yaml"}),"\xa0file or the reference to the CloudShell standard, you need to refresh the\xa0",(0,t.jsx)(l.code,{children:"data_model.py"}),"\xa0file."]}),"\n",(0,t.jsx)(l.p,{children:(0,t.jsx)(l.strong,{children:"To update the data_model.py file:"})}),"\n",(0,t.jsxs)(l.ul,{children:["\n",(0,t.jsxs)(l.li,{children:["\n",(0,t.jsx)(l.p,{children:"Run again the following command in your Command Line:"}),"\n",(0,t.jsx)(l.pre,{children:(0,t.jsx)(l.code,{className:"language-python",children:"shellfoundry generate\n"})}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:l}={...(0,s.M)(),...e.components};return l?(0,t.jsx)(l,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},69644:(e,l,n)=>{n.d(l,{c:()=>t});const t=n.p+"assets/images/Managing-the-Shell-s-Data-2a82733837e6299fee8b4dca1c80764a.png"},4552:(e,l,n)=>{n.d(l,{I:()=>i,M:()=>o});var t=n(11504);const s={},d=t.createContext(s);function o(e){const l=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function i(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(d.Provider,{value:l},e.children)}}}]);