"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[88020],{36604:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>i,contentTitle:()=>s,default:()=>a,frontMatter:()=>p,metadata:()=>l,toc:()=>u});var n=t(17624),r=t(4552);const p={sidebar_position:4,hide_table_of_contents:!0},s="SetAppSecurityGroups Code Example",l={id:"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/setappsecuritygroups-code-example",title:"SetAppSecurityGroups Code Example",description:"The following code sample uses the SetAppSecurityGroups CloudShell Automation API method to open port 22 on two deployed Apps, which belong to a subnet called management, from another deployed App in the sandbox.",source:"@site/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/setappsecuritygroups-code-example.md",sourceDirName:"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell",slug:"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/setappsecuritygroups-code-example",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/setappsecuritygroups-code-example",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/setappsecuritygroups-code-example.md",tags:[],version:"current",lastUpdatedAt:1715806065e3,sidebarPosition:4,frontMatter:{sidebar_position:4,hide_table_of_contents:!0},sidebar:"tutorialSidebar",previous:{title:"Managing Public Cloud Apps in Domains",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/managing-public-cloud-apps-in-domains"},next:{title:"Private Cloud Provider Support in CloudShell",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/private-cloud-provider-support-in-cloudshell/"}},i={},u=[];function d(e){const o={code:"code",h1:"h1",p:"p",pre:"pre",...(0,r.M)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"setappsecuritygroups-code-example",children:"SetAppSecurityGroups Code Example"}),"\n",(0,n.jsxs)(o.p,{children:["The following code sample uses the ",(0,n.jsx)(o.code,{children:"SetAppSecurityGroups"})," CloudShell Automation API method to open port 22 on two deployed Apps, which belong to a subnet called ",(0,n.jsx)(o.code,{children:"management"}),", from another deployed App in the sandbox."]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-python",children:"controllerApp = next(x for x in sandbox.components.apps.values() if x.deployed_app.Name.startswith('Controller'))\n\nVirtualRouterApp_1 = next(x for x in sandbox.components.apps.values() if x.deployed_app.Name.startswith('Virtual Router_1'))\n\nVirtualRouterApp_2 = next(x for x in sandbox.components.apps.values() if x.deployed_app.Name.startswith('Virtual Router_2'))\n\n# Find IP of the controller App and append /32 to be in CIDR format:\n\ncontrollerAddress = controllerApp.FullAddress + '/32'\n\n# Find the ID of the 'management' subnet. We need this because we always open a port in a deployed App in the context of its network interface:\n\nmngtSubnet = next(x for x in sandbox.components.services.values() if x.Alias.startswith('Management'))\n\nmngtSubnetId = next(att.Value for att in mngtSubnet.Attributes if att.Name == 'Subnet Id')\n\nsandbox.automation_api.WriteMessageToReservationOutput(reservationId=sandbox.id, message='Management subnet id is {0}'.format(str(mngtSubnetId)))\n\n# Define a rule on the 'management' network interface that enables access to port 22, from the controller App's IP address:\n\nrule = SecurityGroupRule(FromPort='22', ToPort='22', Protocol='TCP', Source=str(controllerAddress))\n\nconf = SecurityGroupsConfiguration(SubnetId=str(mngtSubnetId), Rules=[rule])\n\n# Apply the rule to both Apps:\n\nsg1 = SecurityGroup(Name=VirtualRouterApp_1.deployed_app.Name, SecurityGroupsConfigurations=[conf])\n\nsg2 = SecurityGroup(Name=VirtualRouterApp_2.deployed_app.Name, SecurityGroupsConfigurations=[conf])\n\n#API call:\n\nsandbox.automation_api.SetAppSecurityGroups(\n    reservationId=sandbox.id,\n    securityGroups=[sg1, sg2]\n) \n"})})]})}function a(e={}){const{wrapper:o}={...(0,r.M)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},4552:(e,o,t)=>{t.d(o,{I:()=>l,M:()=>s});var n=t(11504);const r={},p=n.createContext(r);function s(e){const o=n.useContext(p);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),n.createElement(p.Provider,{value:o},e.children)}}}]);