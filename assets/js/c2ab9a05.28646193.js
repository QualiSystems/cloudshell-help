"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[47008],{37360:(e,l,o)=>{o.r(l),o.d(l,{assets:()=>u,contentTitle:()=>n,default:()=>a,frontMatter:()=>d,metadata:()=>t,toc:()=>s});var i=o(17624),r=o(4552);const d={},n="Public Cloud Provider Support in CloudShell",t={id:"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index",title:"Public Cloud Provider Support in CloudShell",description:'In order to allow CloudShell Apps to deploy and manage virtual machines in a public cloud provider such as AWS or Azure in CloudShell, the system administrator needs to perform several configurations. These include setting up a CloudShell management network on the cloud provider, a VPN connection to enable communication between CloudShell and the cloud provider, and a CloudShell "cloud provider resource", which provides the cloud provider\'s network, storage and access settings to the CloudShell Apps.',source:"@site/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index.md",sourceDirName:"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell",slug:"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index.md",tags:[],version:"current",lastUpdatedAt:1715705932e3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Cloud Provider 2G Shells Features and Capabilities",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/cloud-provider-2g-shells-features-and-capabilities"},next:{title:"AWS Integration and Configuration",permalink:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/aws-integration-and-configuration/"}},u={},s=[{value:"Related Topics",id:"related-topics",level:2}];function c(e){const l={a:"a",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.M)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(l.h1,{id:"public-cloud-provider-support-in-cloudshell",children:"Public Cloud Provider Support in CloudShell"}),"\n",(0,i.jsx)(l.p,{children:'In order to allow CloudShell Apps to deploy and manage virtual machines in a public cloud provider such as AWS or Azure in CloudShell, the system administrator needs to perform several configurations. These include setting up a CloudShell management network on the cloud provider, a VPN connection to enable communication between CloudShell and the cloud provider, and a CloudShell "cloud provider resource", which provides the cloud provider\'s network, storage and access settings to the CloudShell Apps.'}),"\n",(0,i.jsx)(l.p,{children:"In addition, CloudShell tags are attached to all CloudShell-created elements in the cloud provider. You can use these tags to analyze, filter and manage costs associated with your CloudShell activities."}),"\n",(0,i.jsx)(l.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,i.jsxs)(l.ul,{children:["\n",(0,i.jsx)(l.li,{children:(0,i.jsx)(l.a,{href:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/aws-integration-and-configuration/aws-integration/",children:"AWS Integration"})}),"\n",(0,i.jsx)(l.li,{children:(0,i.jsx)(l.a,{href:"/cloudshell-help/next/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/microsoft-azure-integration-and-configuration/microsoft-azure-integration/",children:"Microsoft Azure Integration"})}),"\n"]})]})}function a(e={}){const{wrapper:l}={...(0,r.M)(),...e.components};return l?(0,i.jsx)(l,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4552:(e,l,o)=>{o.d(l,{I:()=>t,M:()=>n});var i=o(11504);const r={},d=i.createContext(r);function n(e){const l=i.useContext(d);return i.useMemo((function(){return"function"==typeof e?e(l):{...l,...e}}),[l,e])}function t(e){let l;return l=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:n(e.components),i.createElement(d.Provider,{value:l},e.children)}}}]);