"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[51812],{42036:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var s=t(17624),l=t(4552);const r={sidebar_position:5,sidebar_label:"Migrating 1st Gen Shells to 2nd Gen"},i="Migrating 1st Gen Shells to 2nd Gen",o={id:"devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell",title:"Migrating 1<sup>st</sup> Gen Shells to 2<sup>nd</sup> Gen",description:"While CloudShell supports the use of 1st Gen shells, it is strongly recommended to switch to the new and improved 2nd Gen shells. For details, see Shells Overview.",source:"@site/docs/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell.md",sourceDirName:"devguide/reference",slug:"/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell",permalink:"/cloudshell-help/next/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell",draft:!1,unlisted:!1,editUrl:"https://github.com/QualiSystems/cloudshell-help/tree/main/docs/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell.md",tags:[],version:"current",lastUpdatedAt:1715438982e3,sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Migrating 1st Gen Shells to 2nd Gen"},sidebar:"tutorialSidebar",previous:{title:"Quali\u2019s Shell Framework (Python 3)",permalink:"/cloudshell-help/next/devguide/reference/quali-shell-framework-py3"},next:{title:"Categories in 1st Gen Service Shells",permalink:"/cloudshell-help/next/devguide/reference/categories-in-1st-gen-service-shells"}},d={},a=[{value:"Replacing the 1<sup>st</sup> Gen shell with a 2<sup>nd</sup> Gen version",id:"replacing-the-1st-gen-shell-with-a-2nd-gen-version",level:2},{value:"Converting a custom 1<sup>st</sup> Gen shell to a 2<sup>nd</sup> Gen shell",id:"converting-a-custom-1st-gen-shell-to-a-2nd-gen-shell",level:2},{value:"Create a 1st Gen Shell",id:"create-a-1st-gen-shell",level:3},{value:"Create a 2nd Gen Shell",id:"create-a-2nd-gen-shell",level:3},{value:"Edit the Shell\u2019s data model",id:"edit-the-shells-data-model",level:3},{value:"Convert the Driver",id:"convert-the-driver",level:3},{value:"Updating the driver",id:"updating-the-driver",level:4},{value:"Updating the Code \u2013 The Shell\u2019s data model",id:"updating-the-code--the-shells-data-model",level:4},{value:"Updating the code \u2013 Auto-Discovery",id:"updating-the-code--auto-discovery",level:4},{value:"Test the conversion",id:"test-the-conversion",level:3}];function h(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"migrating-1st-gen-shells-to-2nd-gen",children:["Migrating 1",(0,s.jsx)("sup",{children:"st"})," Gen Shells to 2",(0,s.jsx)("sup",{children:"nd"})," Gen"]}),"\n",(0,s.jsxs)(n.p,{children:["While CloudShell supports the use of 1st Gen shells, it is strongly recommended to switch to the new and improved 2nd Gen shells. For details, see ",(0,s.jsx)(n.a,{href:"/cloudshell-help/next/intro/features/shells",children:"Shells Overview"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["There are two ways to migrate a 1",(0,s.jsx)("sup",{children:"st"})," Gen shell to a 2",(0,s.jsx)("sup",{children:"nd"})," Gen shell:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/cloudshell-help/next/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell#replacing-the-1st-gen-shell-with-a-2nd-gen-version",children:"Replacing the 1st Gen shell with a 2nd Gen version"}),": Applies to scenarios where you have the 2",(0,s.jsx)("sup",{children:"nd"})," Gen version of the shell. Note that all Quali-certified 1",(0,s.jsx)("sup",{children:"st"})," Gen shells, and some Community-grade shells, have 2",(0,s.jsx)("sup",{children:"nd"})," Gen versions, which are available for download from ",(0,s.jsx)(n.a,{href:"https://github.com/orgs/QualiSystems/discussions/categories/integrations",children:"Quali Repositories"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"/cloudshell-help/next/devguide/reference/migrate-1st-gen-shell-to-2nd-gen-shell#converting-a-custom-1st-gen-shell-to-a-2nd-gen-shell",children:"Converting a custom 1st Gen shell to a 2nd Gen shell"}),": Applies to scenarios where a 2",(0,s.jsx)("sup",{children:"nd"})," Gen version is not available."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"replacing-the-1st-gen-shell-with-a-2nd-gen-version",children:["Replacing the 1",(0,s.jsx)("sup",{children:"st"})," Gen shell with a 2",(0,s.jsx)("sup",{children:"nd"})," Gen version"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsxs)(n.strong,{children:["To replace a 1st Gen shell with a 2",(0,s.jsx)("sup",{children:"nd"})," Gen shell:"]})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Import the 2",(0,s.jsx)("sup",{children:"nd"})," Gen shell into CloudShell. For details, see ",(0,s.jsx)(n.a,{href:"/cloudshell-help/next/admin/cloudshell-manage-dashboard/managing-shells#importing-shells",children:"Importing Shells"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Do one of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For resources: Create an inventory resource using the new 2",(0,s.jsx)("sup",{children:"nd"})," Gen shell. For details, see ",(0,s.jsx)(n.a,{href:"/cloudshell-help/next/portal/inventory/managing-resources/adding-inventory-resources/",children:"Adding Inventory Resources"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"For services: Make sure the service category, which is associated to the service, has access to the relevant domains."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For cloud provider shells, create the 2",(0,s.jsx)("sup",{children:"nd"})," Gen cloud provider resource and set up the deployment path(s) in the relevant App templates, see ",(0,s.jsx)(n.a,{href:"../../portal/blueprints/creating-blueprints/apps/",children:"Apps in Blueprints"}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Important",type:"note",children:(0,s.jsxs)(n.p,{children:['The new deployment type will include "2G" or "2nd Gen" in the name. For example:',(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.img,{src:t(55940).c+"",width:"586",height:"190"})]})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Find any blueprints that use the component to be replaced. For details on how to do this, see ",(0,s.jsx)(n.a,{href:"/cloudshell-help/next/devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app",children:"Finding Blueprints Containing a Specific Resource, Service or App"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In each relevant blueprint and blueprint template, do one of the following:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For resources and services: Replace all instances of the 1",(0,s.jsx)("sup",{children:"st"})," Gen resource or service with the 2",(0,s.jsx)("sup",{children:"nd"})," Gen version."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"For cloud provider shells:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Refresh the relevant Apps to pull the 2",(0,s.jsx)("sup",{children:"nd"})," Gen deployment path from the App template."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:t(35616).c+"",width:"308",height:"234"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Open the App and select the 2",(0,s.jsx)("sup",{children:"nd"})," Gen deployment path."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Optionally delete or exclude the 1",(0,s.jsx)("sup",{children:"st"})," Gen component from CloudShell."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["To exclude a resource, in the ",(0,s.jsx)(n.strong,{children:"Inventory"})," dashboard, click the resource's more info button and select ",(0,s.jsx)(n.strong,{children:"Exclude"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To exclude a service, either remove the service category from the service or remove the category from CloudShell."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["For Apps, either replace the old deployment paths with the 2",(0,s.jsx)("sup",{children:"nd"})," Gen ones in the App templates or remove the service categories from the App."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"converting-a-custom-1st-gen-shell-to-a-2nd-gen-shell",children:["Converting a custom 1",(0,s.jsx)("sup",{children:"st"})," Gen shell to a 2",(0,s.jsx)("sup",{children:"nd"})," Gen shell"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Prerequisites"})}),"\n",(0,s.jsx)(n.p,{children:"Before we start, it is important to understand the requirements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To convert a 1st Gen Shell you need access to the Shell\u2019s source code."}),"\n",(0,s.jsx)(n.li,{children:"You can only convert a Shell that implements the latest standard version."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"It is highly recommended to first learn how to create and model a 2nd Gen Shell before trying to convert from 1st Gen. This is described in detail in previous chapters of this guide."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To convert a 1st Gen Shell to a 2nd Gen Shell:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Create a 1st Gen Shell"}),"\n",(0,s.jsx)(n.li,{children:"Create a 2nd Generation Shell"}),"\n",(0,s.jsx)(n.li,{children:"Edit the Shell\u2019s data model"}),"\n",(0,s.jsx)(n.li,{children:"Convert the Driver"}),"\n",(0,s.jsx)(n.li,{children:"Test the conversion"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"create-a-1st-gen-shell",children:"Create a 1st Gen Shell"}),"\n",(0,s.jsx)(n.p,{children:"In the context of this example, we will create a 1st Gen Shell, enable AutoLoad and add additional custom functions."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To prepare the 1st Gen Shell for conversion:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a 1st Gen switch Shell by running the following command in your Command Line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"shellfoundry new my-switch --template gen1/networking/switch\ncd my-switch\n"})}),"\n",(0,s.jsx)(n.p,{children:"This Shell implements the networking standard v 4.0.1."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enable the\xa0autoload\xa0by updating the following line in the\xa0shellconfig.xml\xa0file in the datamodel folder:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<ShellsConfiguration xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.qualisystems.com/ResourceManagement/ShellsConfigurationSchema.xsd">\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'\t<AutoLoad Enable="true">\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Replace the\xa0get_inventory\xa0function in the\xa0driver.py\xa0file with this sample of\xa0get_inventory:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_inventory(self, context):\n    sub_resources = [ AutoLoadResource(model ='Generic Chassis',name= 'Chassis 1', relative_address='1'),\n    AutoLoadResource(model='Generic Module',name= 'Module 1',relative_address= '1/1'),\n    AutoLoadResource(model='Generic Port',name= 'Port 1', relative_address='1/1/1'),\n    AutoLoadResource(model='Generic Port', name='Port 2', relative_address='1/1/2'),\n    AutoLoadResource(model='Generic Power Port', name='Power Port', relative_address='1/PP1')]\n\n    attributes = [ AutoLoadAttribute(relative_address='', attribute_name='Location', attribute_value='Santa Clara Lab'),\n    AutoLoadAttribute('', 'Model', 'Catalyst 3850'),\n    AutoLoadAttribute('', 'Vendor', 'Cisco'),\n    AutoLoadAttribute('1', 'Serial Number', 'JAE053002JD'),\n    AutoLoadAttribute('1', 'Model', 'WS-X4232-GB-RJ'),\n    AutoLoadAttribute('1/1', 'Model', 'WS-X4233-GB-EJ'),\n    AutoLoadAttribute('1/1', 'Serial Number', 'RVE056702UD'),\n    AutoLoadAttribute('1/1/1', 'MAC Address', 'fe80::e10c:f055:f7f1:bb7t16'),\n    AutoLoadAttribute('1/1/1', 'IPv4 Address', '192.168.10.7'),\n    AutoLoadAttribute('1/1/2', 'MAC Address', 'te67::e40c:g755:f55y:gh7w36'),\n    AutoLoadAttribute('1/1/2', 'IPv4 Address', '192.168.10.9'),\n    AutoLoadAttribute('1/PP1', 'Model', 'WS-X4232-GB-RJ'),\n    AutoLoadAttribute('1/PP1', 'Port Description', 'Power'),\n    AutoLoadAttribute('1/PP1', 'Serial Number', 'RVE056702UD')]\n\n    return AutoLoadDetails(sub_resources,attributes)\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add an additional function that prints the \u2018vendor\u2019 attribute value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'def sample_command(self, context):\n    """\n    Restores a saved artifact previously saved by this Shell driver using the orchestration_save function\n    :param ResourceCommandContext context: The context object for the command with resource and reservation info\n    """\n    return context.resource.attributes["Vendor"]\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"create-a-2nd-gen-shell",children:"Create a 2nd Gen Shell"}),"\n",(0,s.jsx)(n.p,{children:"To convert the Shell, we will first create a new 2nd Gen Shell that implements the same standard version. Then we can edit the data model and update the driver."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To prepare the 2nd Gen Shell for conversion:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Create a 2nd Gen switch Shell by running the following in your Command Line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"shellfoundry new my-switch-g2 --template gen2/networking/switch\ncd my-switch-g2\n"})}),"\n",(0,s.jsx)(n.p,{children:"It is recommended to change the name of the Shell to enable the 1st Gen Shell and the 2nd Gen Shell to work side by side on the same CloudShell database."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"edit-the-shells-data-model",children:"Edit the Shell\u2019s data model"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To edit the Shell\u2019s data model:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the\xa0shell-definition.yaml\xa0file, update the metadata section and make sure that the Shell imports the same CloudShell standard version as the 1st Gen shell."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"metadata:\n    template_name: MySwitch\n    template_author: Anonymous\n    template_version: 0.1.0\n    template_icon: shell-icon.png\n\n    description: >\n    Sample TOSCA based shell\n\n    imports:\n        - cloudshell_standard: cloudshell_networking_standard_4_0_1.yaml\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If the Shell includes custom attributes, see\xa0",(0,s.jsx)(n.a,{href:"https://devguide.quali.com/shells/2020.1.0/modeling-the-shell.html",children:"Modeling the Shell"}),"\xa0to learn how to model them in 2nd Gen Shell format."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["If the Shell includes custom attributes in the discovery process, see\xa0",(0,s.jsx)(n.a,{href:"https://devguide.quali.com/shells/2020.1.0/implementing-discovery-for-inventory-shells.html",children:"Auto Discovery For Inventory Shells"}),"\xa0to learn how to customize the Auto-discovery process."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"convert-the-driver",children:"Convert the Driver"}),"\n",(0,s.jsx)(n.p,{children:"To convert the driver, we need to update the driver files and then update the code."}),"\n",(0,s.jsx)(n.h4,{id:"updating-the-driver",children:"Updating the driver"}),"\n",(0,s.jsx)(n.p,{children:"To update the driver, we need to copy the 1st Gen driver into the 2nd Gen Shell project. However, since the name of the Shell may be different, we need to copy the files and keep all the references of the Shell\u2019s name."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To update the driver:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In a text editor, open the 2nd Gen driver files in the\xa0src\xa0folder and save the lines that include references to the Shell\u2019s name:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the\xa0drivermetadata.xml\xa0file, copy line #1 (MainClass\xa0and\xa0Name)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<Driver Description="Describe the purpose of your CloudShell shell" MainClass="driver.MySwitchG2Driver" Name="MySwitchG2Driver" Version="1.0.0">\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"In the\xa0driver.py\xa0file, copy the\xa0class name"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"class MySwitchG2Driver (ResourceDriverInterface):\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Replace the files in the 2nd Gen Shell\u2019s\xa0src\xa0folder with the files from the 1st Gen Shell\u2019s\xa0src\xa0folder."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To ensure that the original Shell\u2019s name is used, open the files (drivermetadata.xml\xa0and\xa0driver.py) and replace the relevant lines with the lines we saved."}),"\n",(0,s.jsx)(n.p,{children:"At this point, it is recommended to install the Shell and make sure that we don\u2019t get any error message. If the installation fails, make sure that the name references match the new Shell\u2019s name and that you copied all the driver files properly."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To test the modeling of the 2nd Gen Shell, run the following command in your Command Line to install the Shell:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"shellfoundry install\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"updating-the-code--the-shells-data-model",children:"Updating the Code \u2013 The Shell\u2019s data model"}),"\n",(0,s.jsx)(n.p,{children:"To convert the 1st Gen Shell code to 2nd Gen, we need to modify it to match the 2nd Gen Shell\u2019s data model."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To update the driver data model code:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Generate the Shell\u2019s data model by running the following command in your Command Line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"shellfoundry generate\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add the following to the driver.py file to import the Shell date model into the new driver:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"from data_model import *\n"})}),"\n",(0,s.jsx)(n.p,{children:"The Shell\u2019s data model should be used in all the places in the driver where we refer to an attribute by name."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For our example, replace the\xa0sample_command\xa0with the code below."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/QualiSystems/devguide_examples/blob/master/2nd%20gen%20shells%20-%20migration/src/driver.py",children:"This Github Sample"}),"\xa0is by\xa0",(0,s.jsx)(n.a,{href:"https://github.com/QualiSystems",children:"QualiSystems"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def sample_command(self, context):\n\tresource = MySwitchG2.create_from_context(context)\n\treturn resource.vendor\n"})}),"\n",(0,s.jsx)(n.p,{children:"This code converts the\xa0context\xa0object that CloudShell provides to an instance of the Shell\u2019s data model, which is saved in the resource variable, then retrieves the value of the vendor attribute by referring to the\xa0resource.vendor\xa0property."}),"\n",(0,s.jsx)(n.h4,{id:"updating-the-code--auto-discovery",children:"Updating the code \u2013 Auto-Discovery"}),"\n",(0,s.jsx)(n.p,{children:"To simplify the conversion process, CloudShell provides a special Python class that transforms 1st Gen discovery code to the 2nd Gen discovery\u2019s structure without having to rewrite the existing code."}),"\n",(0,s.jsx)(n.p,{children:"The class is called\xa0LegacyUtils\xa0and it is automatically generated with the Shell\u2019s data model."}),"\n",(0,s.jsx)(n.p,{children:"The example below shows how to use the\xa0LegacyUtils\xa0class:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://github.com/QualiSystems/devguide_examples/blob/master/2nd%20gen%20shells%20-%20migration/src/driver.py",children:"This Github Sample"}),"\xa0is by\xa0",(0,s.jsx)(n.a,{href:"https://github.com/QualiSystems",children:"QualiSystems"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"def get_inventory(self, context):\n    sub_resources = [ AutoLoadResource(model ='Generic Chassis',name= 'Chassis 1', relative_address='1'),\n    AutoLoadResource(model='Generic Module',name= 'Module 1',relative_address= '1/1'),\n    AutoLoadResource(model='Generic Port',name= 'Port 1', relative_address='1/1/1'),\n    AutoLoadResource(model='Generic Port', name='Port 2', relative_address='1/1/2'),\n    AutoLoadResource(model='Generic Power Port', name='Power Port', relative_address='1/PP1')]\n\n    attributes = [ AutoLoadAttribute(relative_address='', attribute_name='Location', attribute_value='Santa Clara Lab'),\n    AutoLoadAttribute('', 'Model', 'Catalyst 3850'),\n    AutoLoadAttribute('', 'Vendor', 'Cisco'),\n    AutoLoadAttribute('1', 'Serial Number', 'JAE053002JD'),\n    AutoLoadAttribute('1', 'Model', 'WS-X4232-GB-RJ'),\n    AutoLoadAttribute('1/1', 'Model', 'WS-X4233-GB-EJ'),\n    AutoLoadAttribute('1/1', 'Serial Number', 'RVE056702UD'),\n    AutoLoadAttribute('1/1/1', 'MAC Address', 'fe80::e10c:f055:f7f1:bb7t16'),\n    AutoLoadAttribute('1/1/1', 'IPv4 Address', '192.168.10.7'),\n    AutoLoadAttribute('1/1/2', 'MAC Address', 'te67::e40c:g755:f55y:gh7w36'),\n    AutoLoadAttribute('1/1/2', 'IPv4 Address', '192.168.10.9'),\n    AutoLoadAttribute('1/PP1', 'Model', 'WS-X4232-GB-RJ'),\n    AutoLoadAttribute('1/PP1', 'Port Description', 'Power'),\n    AutoLoadAttribute('1/PP1', 'Serial Number', 'RVE056702UD')]\n\n    autoload_details = AutoLoadDetails(sub_resources,attributes)\n    migrated_details = LegacyUtils().migrate_autoload_details(autoload_details, context)\n\n    return migrated_details.create_autoload_details()\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this example, you can see that the code creates two arrays:\xa0sub_resources\xa0and\xa0attributes, which are saved in the\xa0autoload_details\xa0object. This 1st Gen structure is using explicit attribute names and model names in string format and needs to be transformed to 2nd Gen format."}),"\n",(0,s.jsx)(n.p,{children:"With the\xa0LegacyUtils().migrate_autoload_details\xa0method, we convert the\xa0autoload_details\xa0object into a new object\xa0migrated_details. Then the function returns the new formatted structure by calling the\xa0migrated_details.create_autoload_details()\xa0object."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"migrated_details = LegacyUtils().migrate_autoload_details(autoload_details, context)\nreturn migrated_details.create_autoload_details()\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By using\xa0LegacyUtils\xa0we can avoid rewriting the\xa0get_invontory\xa0function. However, in the long term, it is recommended to refactor the code to use the Shell\u2019s data model, as defined in\xa0",(0,s.jsx)(n.a,{href:"https://devguide.quali.com/shells/2020.1.0/implementing-discovery-for-inventory-shells.html",children:"Auto Discovery For Inventory Shells"})]}),"\n",(0,s.jsx)(n.h3,{id:"test-the-conversion",children:"Test the conversion"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"To test the conversion:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Install the Shell by running the following in Command-Line:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"shellfoundry install\n"})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Log in as administrator to CloudShell Portal, create a Shell resource. Make sure that the Auto-discovery successfully creates the resource with all of its sub-resources."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Add the resource to a sandbox and run the\xa0sample_command."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Check the\xa0",(0,s.jsx)(n.strong,{children:"Output"}),"\xa0console to see that the command successfully printed the value of the vendor attribute."]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},55940:(e,n,t)=>{t.d(n,{c:()=>s});const s=t.p+"assets/images/DeploymentTypes_586x190-3a69a36d5f6123069234a74c41774f54.png"},35616:(e,n,t)=>{t.d(n,{c:()=>s});const s=t.p+"assets/images/RefreshAppTemplate-68033c0d8324274796f46d68ad9b1b95.png"},4552:(e,n,t)=>{t.d(n,{I:()=>o,M:()=>i});var s=t(11504);const l={},r=s.createContext(l);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);