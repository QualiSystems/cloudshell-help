"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([["36415"],{8577:function(e,o,l){l.r(o),l.d(o,{frontMatter:()=>n,toc:()=>s,default:()=>a,metadata:()=>r,assets:()=>u,contentTitle:()=>t});var r=JSON.parse('{"id":"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index","title":"Public Cloud Provider Support in CloudShell","description":"In order to allow CloudShell Apps to deploy and manage virtual machines in a public cloud provider such as AWS or Azure in CloudShell, the system administrator needs to perform several configurations. These include setting up a CloudShell management network on the cloud provider, a VPN connection to enable communication between CloudShell and the cloud provider, and a CloudShell \\"cloud provider resource\\", which provides the cloud provider\'s network, storage and access settings to the CloudShell Apps.","source":"@site/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index.md","sourceDirName":"admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell","slug":"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/","permalink":"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/","draft":false,"unlisted":false,"editUrl":"https://github.com/QualiSystems/cloudshell-help/tree/main/docs/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/index.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Cloud Provider 2G Shells Features and Capabilities","permalink":"/admin/supported-cloud-providers-in-cloudshell/cloud-provider-2g-shells-features-and-capabilities"},"next":{"title":"AWS Integration and Configuration","permalink":"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/aws-integration-and-configuration/"}}'),i=l(74848),d=l(84429);let n={},t="Public Cloud Provider Support in CloudShell",u={},s=[{value:"Related Topics",id:"related-topics",level:2}];function c(e){let o={a:"a",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",ul:"ul",...(0,d.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.header,{children:(0,i.jsx)(o.h1,{id:"public-cloud-provider-support-in-cloudshell",children:"Public Cloud Provider Support in CloudShell"})}),"\n",(0,i.jsx)(o.p,{children:'In order to allow CloudShell Apps to deploy and manage virtual machines in a public cloud provider such as AWS or Azure in CloudShell, the system administrator needs to perform several configurations. These include setting up a CloudShell management network on the cloud provider, a VPN connection to enable communication between CloudShell and the cloud provider, and a CloudShell "cloud provider resource", which provides the cloud provider\'s network, storage and access settings to the CloudShell Apps.'}),"\n",(0,i.jsx)(o.p,{children:"In addition, CloudShell tags are attached to all CloudShell-created elements in the cloud provider. You can use these tags to analyze, filter and manage costs associated with your CloudShell activities."}),"\n",(0,i.jsx)(o.h2,{id:"related-topics",children:"Related Topics"}),"\n",(0,i.jsxs)(o.ul,{children:["\n",(0,i.jsx)(o.li,{children:(0,i.jsx)(o.a,{href:"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/aws-integration-and-configuration/aws-integration/",children:"AWS Integration"})}),"\n",(0,i.jsx)(o.li,{children:(0,i.jsx)(o.a,{href:"/admin/supported-cloud-providers-in-cloudshell/public-cloud-provider-support-in-cloudshell/microsoft-azure-integration-and-configuration/microsoft-azure-integration/",children:"Microsoft Azure Integration"})}),"\n"]})]})}function a(e={}){let{wrapper:o}={...(0,d.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},84429:function(e,o,l){l.d(o,{R:()=>n,x:()=>t});var r=l(96540);let i={},d=r.createContext(i);function n(e){let o=r.useContext(d);return r.useMemo(function(){return"function"==typeof e?e(o):{...o,...e}},[o,e])}function t(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:n(e.components),r.createElement(d.Provider,{value:o},e.children)}}}]);