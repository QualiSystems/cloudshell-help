"use strict";(self.webpackChunkcloudshell_help=self.webpackChunkcloudshell_help||[]).push([[77516],{2074:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app","title":"Finding Blueprints Containing a Specific Resource, Service or App","description":"The following Python scripts utilize the CloudShell Automation API to print a list of the blueprints that have a specific component and should be run from an IDE that can access the Quali Server.","source":"@site/versioned_docs/version-2024.1/devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app.md","sourceDirName":"devguide/available-cs-api/useful-cs-api-examples","slug":"/devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app","permalink":"/devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app","draft":false,"unlisted":false,"editUrl":"https://github.com/QualiSystems/cloudshell-help/tree/main/versioned_docs/version-2024.1/devguide/available-cs-api/useful-cs-api-examples/find-blueprints-with-rsrc-serv-or-app.md","tags":[],"version":"2024.1","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Performing Actions on Resources in the Sandbox","permalink":"/devguide/available-cs-api/useful-cs-api-examples/peform-actions-on-rsrc-in-sandbox"},"next":{"title":"Editing Apps in a Sandbox","permalink":"/devguide/available-cs-api/useful-cs-api-examples/edit-app-in-sandbox"}}');var t=r(74848),s=r(28453);const a={sidebar_position:3},o="Finding Blueprints Containing a Specific Resource, Service or App",p={},l=[{value:"Print blueprints that have a resource",id:"print-blueprints-that-have-a-resource",level:2},{value:"Print blueprints that have a service",id:"print-blueprints-that-have-a-service",level:2},{value:"Print blueprints containing Apps with a deployment type based on a specific cloud provider resource",id:"print-blueprints-containing-apps-with-a-deployment-type-based-on-a-specific-cloud-provider-resource",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"finding-blueprints-containing-a-specific-resource-service-or-app",children:"Finding Blueprints Containing a Specific Resource, Service or App"})}),"\n",(0,t.jsx)(n.p,{children:"The following Python scripts utilize the CloudShell Automation API to print a list of the blueprints that have a specific component and should be run from an IDE that can access the Quali Server."}),"\n",(0,t.jsx)(n.h2,{id:"print-blueprints-that-have-a-resource",children:"Print blueprints that have a resource"}),"\n",(0,t.jsxs)(n.p,{children:["To use this script, replace ",(0,t.jsx)(n.code,{children:"resource name"})," with the name of the resource and set the CloudShell details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from cloudshell.api.cloudshell_api import CloudShellAPISession\nfrom pprint import pprint\n\n# specify target resource name\nTARGET_RESOURCE_NAME = "resource name"\n\n# specify api session details\nuser = "admin"\npassword = "admin"\nserver = "localhost"\ndomain = "Global"\n\napi = CloudShellAPISession(host=server, username=user, password=password, domain=domain)\n\n\ndef is_resource_list_in_blueprint(api, blueprint_name, target_resource_name):\n    """\n    search current blueprint resources for presence of the Target Resource\n    :param CloudShellAPISession api:\n    :param str blueprint_name:\n    :param str target_resource_name:\n    :return:\n    """\n    details = api.GetTopologyDetails(blueprint_name)\n    bp_resources = details.Resources\n    for curr_resource in bp_resources:\n        if curr_resource.Name == target_resource_name:\n            return True\n    return False\n\n\nall_blueprints = api.GetTopologiesByCategory().Topologies\ntarget_blueprints = [bp_name for bp_name in all_blueprints\n                     if is_resource_list_in_blueprint(api, bp_name, TARGET_RESOURCE_NAME)]\n\nif not target_blueprints:\n    print("No blueprints in system with target resource")\nelse:\n    print("=== Target Blueprints containing \'{}\' ===".format(TARGET_RESOURCE_NAME))\n    pprint(target_blueprints)\n\n    # add to text file\n    with open(\'target_blueprints.txt\', \'w\') as f:\n        for bp in target_blueprints:\n            print >> f, bp\n'})}),"\n",(0,t.jsx)(n.h2,{id:"print-blueprints-that-have-a-service",children:"Print blueprints that have a service"}),"\n",(0,t.jsxs)(n.p,{children:["To use this script, replace ",(0,t.jsx)(n.code,{children:"service alias"})," with the alias of the service and set the CloudShell details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from cloudshell.api.cloudshell_api import CloudShellAPISession\n\n# set list of service "Alias"\nTARGET_SERVICES = ["service alias"]\n\n# api session details\nuser = "admin"\npassword = "admin"\nserver = "localhost"\ndomain = "Global"\n\napi = CloudShellAPISession(host=server, username=user, password=password, domain=domain)\n\n\ndef is_resource_list_in_blueprint(api, blueprint_name, target_service_names):\n    """\n    search current blueprint resources for presence of the Target Resource\n    :param CloudShellAPISession api:\n    :param str blueprint_name:\n    :param [str] target_service_names:\n    :return:\n    """\n    details = api.GetTopologyDetails(blueprint_name)\n    bp_services = details.Services\n    bp_service_names = [service.Alias for service in bp_services]\n    for service_name in target_service_names:\n        for bp_service_name in bp_service_names:\n            if service_name == bp_service_name:\n                return True\n            else:\n                continue\n\n\nall_blueprints = api.GetTopologiesByCategory().Topologies\ntarget_blueprints = [bp_name for bp_name in all_blueprints\n                     if is_resource_list_in_blueprint(api, bp_name, TARGET_SERVICES)]\n\nif not target_blueprints:\n    print("No blueprints in system with target services")\nelse:\n    print("=== Target Blueprints containing \'{}\' resources ===".format(TARGET_SERVICES))\n    print(target_blueprints)\n\n    # add blueprints to text file\n    with open(\'target_blueprints.txt\', \'w\') as f:\n        for bp in target_blueprints:\n            print >> f, bp\n'})}),"\n",(0,t.jsx)(n.h2,{id:"print-blueprints-containing-apps-with-a-deployment-type-based-on-a-specific-cloud-provider-resource",children:"Print blueprints containing Apps with a deployment type based on a specific cloud provider resource"}),"\n",(0,t.jsxs)(n.p,{children:["This script looks for blueprints with Apps that contain a deployment path from a particular cloud provider resource. To use, replace ",(0,t.jsx)(n.code,{children:"cloud provider resource name"})," with the name of the cloud provider resource and set the CloudShell details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from cloudshell.api.cloudshell_api import CloudShellAPISession\nfrom pprint import pprint\nfrom timeit import default_timer\n\n# set list of target resources\nTARGET_CLOUD_PROVIDER_RESOURCE = "cloud provider resource name"\n\n# api session details\nuser = "admin"\npassword = "admin"\nserver = "localhost"\ndomain = "Global"\n\napi = CloudShellAPISession(host=server, username=user, password=password, domain=domain)\n\n\ndef is_resource_list_in_blueprint(api, blueprint_name, target_cloud_provider):\n    """\n    search current blueprint resources for presence of the Target Resource\n    :param CloudShellAPISession api:\n    :param str blueprint_name:\n    :param str target_cloud_provider:\n    :return:\n    """\n    details = api.GetTopologyDetails(blueprint_name)\n    bp_apps = details.Apps\n    for curr_app in bp_apps:\n        deployment_paths = curr_app.DeploymentPaths\n        for dp in deployment_paths:\n            curr_cloud_provider = dp.DeploymentService.CloudProvider\n            if curr_cloud_provider == target_cloud_provider:\n                return True\n    return False\n\nstart = default_timer()\nall_blueprints = api.GetTopologiesByCategory().Topologies\n\nprint("searching {} blueprints for results...".format(len(all_blueprints)))\n\ntarget_blueprints = [bp_name for bp_name in all_blueprints\n                     if is_resource_list_in_blueprint(api, bp_name, TARGET_CLOUD_PROVIDER_RESOURCE)]\n\nif not target_blueprints:\n    print("No blueprints in system with target resource")\nelse:\n    print("=== Target Blueprints containing \'{}\' ===".format(TARGET_CLOUD_PROVIDER_RESOURCE))\n    pprint(target_blueprints)\n\n    # add to text file\n    with open(\'target_blueprints.txt\', \'w\') as f:\n        for bp in target_blueprints:\n            print >> f, bp\n\nprint("Done after {} seconds.".format(default_timer() - start))\n'})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var i=r(96540);const t={},s=i.createContext(t);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);